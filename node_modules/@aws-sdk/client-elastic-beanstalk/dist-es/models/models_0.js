import { ElasticBeanstalkServiceException as __BaseException } from "./ElasticBeanstalkServiceException";
export class InsufficientPrivilegesException extends __BaseException {
    name = "InsufficientPrivilegesException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InsufficientPrivilegesException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InsufficientPrivilegesException.prototype);
    }
}
export const ActionHistoryStatus = {
    Completed: "Completed",
    Failed: "Failed",
    Unknown: "Unknown",
};
export const ActionStatus = {
    Pending: "Pending",
    Running: "Running",
    Scheduled: "Scheduled",
    Unknown: "Unknown",
};
export const ActionType = {
    InstanceRefresh: "InstanceRefresh",
    PlatformUpdate: "PlatformUpdate",
    Unknown: "Unknown",
};
export const SourceRepository = {
    CodeCommit: "CodeCommit",
    S3: "S3",
};
export const SourceType = {
    Git: "Git",
    Zip: "Zip",
};
export const ApplicationVersionStatus = {
    Building: "Building",
    Failed: "Failed",
    Processed: "Processed",
    Processing: "Processing",
    Unprocessed: "Unprocessed",
};
export class ElasticBeanstalkServiceException extends __BaseException {
    name = "ElasticBeanstalkServiceException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ElasticBeanstalkServiceException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ElasticBeanstalkServiceException.prototype);
    }
}
export class ManagedActionInvalidStateException extends __BaseException {
    name = "ManagedActionInvalidStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ManagedActionInvalidStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ManagedActionInvalidStateException.prototype);
    }
}
export const EnvironmentHealth = {
    Green: "Green",
    Grey: "Grey",
    Red: "Red",
    Yellow: "Yellow",
};
export const EnvironmentHealthStatus = {
    Degraded: "Degraded",
    Info: "Info",
    NoData: "NoData",
    Ok: "Ok",
    Pending: "Pending",
    Severe: "Severe",
    Suspended: "Suspended",
    Unknown: "Unknown",
    Warning: "Warning",
};
export const EnvironmentStatus = {
    Aborting: "Aborting",
    Launching: "Launching",
    LinkingFrom: "LinkingFrom",
    LinkingTo: "LinkingTo",
    Ready: "Ready",
    Terminated: "Terminated",
    Terminating: "Terminating",
    Updating: "Updating",
};
export class TooManyEnvironmentsException extends __BaseException {
    name = "TooManyEnvironmentsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyEnvironmentsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyEnvironmentsException.prototype);
    }
}
export class TooManyApplicationsException extends __BaseException {
    name = "TooManyApplicationsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyApplicationsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyApplicationsException.prototype);
    }
}
export class CodeBuildNotInServiceRegionException extends __BaseException {
    name = "CodeBuildNotInServiceRegionException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CodeBuildNotInServiceRegionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CodeBuildNotInServiceRegionException.prototype);
    }
}
export const ComputeType = {
    BUILD_GENERAL1_LARGE: "BUILD_GENERAL1_LARGE",
    BUILD_GENERAL1_MEDIUM: "BUILD_GENERAL1_MEDIUM",
    BUILD_GENERAL1_SMALL: "BUILD_GENERAL1_SMALL",
};
export class S3LocationNotInServiceRegionException extends __BaseException {
    name = "S3LocationNotInServiceRegionException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "S3LocationNotInServiceRegionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, S3LocationNotInServiceRegionException.prototype);
    }
}
export class TooManyApplicationVersionsException extends __BaseException {
    name = "TooManyApplicationVersionsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyApplicationVersionsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyApplicationVersionsException.prototype);
    }
}
export const ConfigurationDeploymentStatus = {
    deployed: "deployed",
    failed: "failed",
    pending: "pending",
};
export class TooManyBucketsException extends __BaseException {
    name = "TooManyBucketsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyBucketsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyBucketsException.prototype);
    }
}
export class TooManyConfigurationTemplatesException extends __BaseException {
    name = "TooManyConfigurationTemplatesException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyConfigurationTemplatesException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyConfigurationTemplatesException.prototype);
    }
}
export const PlatformStatus = {
    Creating: "Creating",
    Deleted: "Deleted",
    Deleting: "Deleting",
    Failed: "Failed",
    Ready: "Ready",
};
export class TooManyPlatformsException extends __BaseException {
    name = "TooManyPlatformsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyPlatformsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyPlatformsException.prototype);
    }
}
export class S3SubscriptionRequiredException extends __BaseException {
    name = "S3SubscriptionRequiredException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "S3SubscriptionRequiredException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, S3SubscriptionRequiredException.prototype);
    }
}
export class OperationInProgressException extends __BaseException {
    name = "OperationInProgressException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OperationInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OperationInProgressException.prototype);
    }
}
export class SourceBundleDeletionException extends __BaseException {
    name = "SourceBundleDeletionException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SourceBundleDeletionException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SourceBundleDeletionException.prototype);
    }
}
export class PlatformVersionStillReferencedException extends __BaseException {
    name = "PlatformVersionStillReferencedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PlatformVersionStillReferencedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PlatformVersionStillReferencedException.prototype);
    }
}
export const ConfigurationOptionValueType = {
    List: "List",
    Scalar: "Scalar",
};
export const EnvironmentHealthAttribute = {
    All: "All",
    ApplicationMetrics: "ApplicationMetrics",
    Causes: "Causes",
    Color: "Color",
    HealthStatus: "HealthStatus",
    InstancesHealth: "InstancesHealth",
    RefreshedAt: "RefreshedAt",
    Status: "Status",
};
export class InvalidRequestException extends __BaseException {
    name = "InvalidRequestException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export const FailureType = {
    CancellationFailed: "CancellationFailed",
    InternalFailure: "InternalFailure",
    InvalidEnvironmentState: "InvalidEnvironmentState",
    PermissionsError: "PermissionsError",
    RollbackFailed: "RollbackFailed",
    RollbackSuccessful: "RollbackSuccessful",
    UpdateCancelled: "UpdateCancelled",
};
export const EventSeverity = {
    DEBUG: "DEBUG",
    ERROR: "ERROR",
    FATAL: "FATAL",
    INFO: "INFO",
    TRACE: "TRACE",
    WARN: "WARN",
};
export const InstancesHealthAttribute = {
    All: "All",
    ApplicationMetrics: "ApplicationMetrics",
    AvailabilityZone: "AvailabilityZone",
    Causes: "Causes",
    Color: "Color",
    Deployment: "Deployment",
    HealthStatus: "HealthStatus",
    InstanceType: "InstanceType",
    LaunchedAt: "LaunchedAt",
    RefreshedAt: "RefreshedAt",
    System: "System",
};
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ResourceTypeNotSupportedException extends __BaseException {
    name = "ResourceTypeNotSupportedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceTypeNotSupportedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceTypeNotSupportedException.prototype);
    }
}
export const EnvironmentInfoType = {
    bundle: "bundle",
    tail: "tail",
};
export class TooManyTagsException extends __BaseException {
    name = "TooManyTagsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
export const ValidationSeverity = {
    error: "error",
    warning: "warning",
};
