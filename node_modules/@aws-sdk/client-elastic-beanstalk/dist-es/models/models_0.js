import { ElasticBeanstalkServiceException as __BaseException } from "./ElasticBeanstalkServiceException";
export class InsufficientPrivilegesException extends __BaseException {
    constructor(opts) {
        super({
            name: "InsufficientPrivilegesException",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientPrivilegesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientPrivilegesException.prototype);
    }
}
export var ActionHistoryStatus;
(function (ActionHistoryStatus) {
    ActionHistoryStatus["Completed"] = "Completed";
    ActionHistoryStatus["Failed"] = "Failed";
    ActionHistoryStatus["Unknown"] = "Unknown";
})(ActionHistoryStatus || (ActionHistoryStatus = {}));
export var ActionStatus;
(function (ActionStatus) {
    ActionStatus["Pending"] = "Pending";
    ActionStatus["Running"] = "Running";
    ActionStatus["Scheduled"] = "Scheduled";
    ActionStatus["Unknown"] = "Unknown";
})(ActionStatus || (ActionStatus = {}));
export var ActionType;
(function (ActionType) {
    ActionType["InstanceRefresh"] = "InstanceRefresh";
    ActionType["PlatformUpdate"] = "PlatformUpdate";
    ActionType["Unknown"] = "Unknown";
})(ActionType || (ActionType = {}));
export var SourceRepository;
(function (SourceRepository) {
    SourceRepository["CodeCommit"] = "CodeCommit";
    SourceRepository["S3"] = "S3";
})(SourceRepository || (SourceRepository = {}));
export var SourceType;
(function (SourceType) {
    SourceType["Git"] = "Git";
    SourceType["Zip"] = "Zip";
})(SourceType || (SourceType = {}));
export var ApplicationVersionStatus;
(function (ApplicationVersionStatus) {
    ApplicationVersionStatus["Building"] = "Building";
    ApplicationVersionStatus["Failed"] = "Failed";
    ApplicationVersionStatus["Processed"] = "Processed";
    ApplicationVersionStatus["Processing"] = "Processing";
    ApplicationVersionStatus["Unprocessed"] = "Unprocessed";
})(ApplicationVersionStatus || (ApplicationVersionStatus = {}));
export class ElasticBeanstalkServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "ElasticBeanstalkServiceException",
            $fault: "client",
            ...opts,
        });
        this.name = "ElasticBeanstalkServiceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ElasticBeanstalkServiceException.prototype);
    }
}
export class ManagedActionInvalidStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "ManagedActionInvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "ManagedActionInvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ManagedActionInvalidStateException.prototype);
    }
}
export var EnvironmentHealth;
(function (EnvironmentHealth) {
    EnvironmentHealth["Green"] = "Green";
    EnvironmentHealth["Grey"] = "Grey";
    EnvironmentHealth["Red"] = "Red";
    EnvironmentHealth["Yellow"] = "Yellow";
})(EnvironmentHealth || (EnvironmentHealth = {}));
export var EnvironmentHealthStatus;
(function (EnvironmentHealthStatus) {
    EnvironmentHealthStatus["Degraded"] = "Degraded";
    EnvironmentHealthStatus["Info"] = "Info";
    EnvironmentHealthStatus["NoData"] = "NoData";
    EnvironmentHealthStatus["Ok"] = "Ok";
    EnvironmentHealthStatus["Pending"] = "Pending";
    EnvironmentHealthStatus["Severe"] = "Severe";
    EnvironmentHealthStatus["Suspended"] = "Suspended";
    EnvironmentHealthStatus["Unknown"] = "Unknown";
    EnvironmentHealthStatus["Warning"] = "Warning";
})(EnvironmentHealthStatus || (EnvironmentHealthStatus = {}));
export var EnvironmentStatus;
(function (EnvironmentStatus) {
    EnvironmentStatus["Aborting"] = "Aborting";
    EnvironmentStatus["Launching"] = "Launching";
    EnvironmentStatus["LinkingFrom"] = "LinkingFrom";
    EnvironmentStatus["LinkingTo"] = "LinkingTo";
    EnvironmentStatus["Ready"] = "Ready";
    EnvironmentStatus["Terminated"] = "Terminated";
    EnvironmentStatus["Terminating"] = "Terminating";
    EnvironmentStatus["Updating"] = "Updating";
})(EnvironmentStatus || (EnvironmentStatus = {}));
export class TooManyEnvironmentsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyEnvironmentsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyEnvironmentsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyEnvironmentsException.prototype);
    }
}
export class TooManyApplicationsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyApplicationsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyApplicationsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyApplicationsException.prototype);
    }
}
export class CodeBuildNotInServiceRegionException extends __BaseException {
    constructor(opts) {
        super({
            name: "CodeBuildNotInServiceRegionException",
            $fault: "client",
            ...opts,
        });
        this.name = "CodeBuildNotInServiceRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CodeBuildNotInServiceRegionException.prototype);
    }
}
export var ComputeType;
(function (ComputeType) {
    ComputeType["BUILD_GENERAL1_LARGE"] = "BUILD_GENERAL1_LARGE";
    ComputeType["BUILD_GENERAL1_MEDIUM"] = "BUILD_GENERAL1_MEDIUM";
    ComputeType["BUILD_GENERAL1_SMALL"] = "BUILD_GENERAL1_SMALL";
})(ComputeType || (ComputeType = {}));
export class S3LocationNotInServiceRegionException extends __BaseException {
    constructor(opts) {
        super({
            name: "S3LocationNotInServiceRegionException",
            $fault: "client",
            ...opts,
        });
        this.name = "S3LocationNotInServiceRegionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, S3LocationNotInServiceRegionException.prototype);
    }
}
export class TooManyApplicationVersionsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyApplicationVersionsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyApplicationVersionsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyApplicationVersionsException.prototype);
    }
}
export var ConfigurationDeploymentStatus;
(function (ConfigurationDeploymentStatus) {
    ConfigurationDeploymentStatus["deployed"] = "deployed";
    ConfigurationDeploymentStatus["failed"] = "failed";
    ConfigurationDeploymentStatus["pending"] = "pending";
})(ConfigurationDeploymentStatus || (ConfigurationDeploymentStatus = {}));
export class TooManyBucketsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyBucketsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyBucketsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyBucketsException.prototype);
    }
}
export class TooManyConfigurationTemplatesException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyConfigurationTemplatesException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyConfigurationTemplatesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyConfigurationTemplatesException.prototype);
    }
}
export var PlatformStatus;
(function (PlatformStatus) {
    PlatformStatus["Creating"] = "Creating";
    PlatformStatus["Deleted"] = "Deleted";
    PlatformStatus["Deleting"] = "Deleting";
    PlatformStatus["Failed"] = "Failed";
    PlatformStatus["Ready"] = "Ready";
})(PlatformStatus || (PlatformStatus = {}));
export class TooManyPlatformsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyPlatformsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyPlatformsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyPlatformsException.prototype);
    }
}
export class S3SubscriptionRequiredException extends __BaseException {
    constructor(opts) {
        super({
            name: "S3SubscriptionRequiredException",
            $fault: "client",
            ...opts,
        });
        this.name = "S3SubscriptionRequiredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, S3SubscriptionRequiredException.prototype);
    }
}
export class OperationInProgressException extends __BaseException {
    constructor(opts) {
        super({
            name: "OperationInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationInProgressException.prototype);
    }
}
export class SourceBundleDeletionException extends __BaseException {
    constructor(opts) {
        super({
            name: "SourceBundleDeletionException",
            $fault: "client",
            ...opts,
        });
        this.name = "SourceBundleDeletionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SourceBundleDeletionException.prototype);
    }
}
export class PlatformVersionStillReferencedException extends __BaseException {
    constructor(opts) {
        super({
            name: "PlatformVersionStillReferencedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PlatformVersionStillReferencedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PlatformVersionStillReferencedException.prototype);
    }
}
export var ConfigurationOptionValueType;
(function (ConfigurationOptionValueType) {
    ConfigurationOptionValueType["List"] = "List";
    ConfigurationOptionValueType["Scalar"] = "Scalar";
})(ConfigurationOptionValueType || (ConfigurationOptionValueType = {}));
export var EnvironmentHealthAttribute;
(function (EnvironmentHealthAttribute) {
    EnvironmentHealthAttribute["All"] = "All";
    EnvironmentHealthAttribute["ApplicationMetrics"] = "ApplicationMetrics";
    EnvironmentHealthAttribute["Causes"] = "Causes";
    EnvironmentHealthAttribute["Color"] = "Color";
    EnvironmentHealthAttribute["HealthStatus"] = "HealthStatus";
    EnvironmentHealthAttribute["InstancesHealth"] = "InstancesHealth";
    EnvironmentHealthAttribute["RefreshedAt"] = "RefreshedAt";
    EnvironmentHealthAttribute["Status"] = "Status";
})(EnvironmentHealthAttribute || (EnvironmentHealthAttribute = {}));
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
export var FailureType;
(function (FailureType) {
    FailureType["CancellationFailed"] = "CancellationFailed";
    FailureType["InternalFailure"] = "InternalFailure";
    FailureType["InvalidEnvironmentState"] = "InvalidEnvironmentState";
    FailureType["PermissionsError"] = "PermissionsError";
    FailureType["RollbackFailed"] = "RollbackFailed";
    FailureType["RollbackSuccessful"] = "RollbackSuccessful";
    FailureType["UpdateCancelled"] = "UpdateCancelled";
})(FailureType || (FailureType = {}));
export var EventSeverity;
(function (EventSeverity) {
    EventSeverity["DEBUG"] = "DEBUG";
    EventSeverity["ERROR"] = "ERROR";
    EventSeverity["FATAL"] = "FATAL";
    EventSeverity["INFO"] = "INFO";
    EventSeverity["TRACE"] = "TRACE";
    EventSeverity["WARN"] = "WARN";
})(EventSeverity || (EventSeverity = {}));
export var InstancesHealthAttribute;
(function (InstancesHealthAttribute) {
    InstancesHealthAttribute["All"] = "All";
    InstancesHealthAttribute["ApplicationMetrics"] = "ApplicationMetrics";
    InstancesHealthAttribute["AvailabilityZone"] = "AvailabilityZone";
    InstancesHealthAttribute["Causes"] = "Causes";
    InstancesHealthAttribute["Color"] = "Color";
    InstancesHealthAttribute["Deployment"] = "Deployment";
    InstancesHealthAttribute["HealthStatus"] = "HealthStatus";
    InstancesHealthAttribute["InstanceType"] = "InstanceType";
    InstancesHealthAttribute["LaunchedAt"] = "LaunchedAt";
    InstancesHealthAttribute["RefreshedAt"] = "RefreshedAt";
    InstancesHealthAttribute["System"] = "System";
})(InstancesHealthAttribute || (InstancesHealthAttribute = {}));
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ResourceTypeNotSupportedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceTypeNotSupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceTypeNotSupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceTypeNotSupportedException.prototype);
    }
}
export var EnvironmentInfoType;
(function (EnvironmentInfoType) {
    EnvironmentInfoType["bundle"] = "bundle";
    EnvironmentInfoType["tail"] = "tail";
})(EnvironmentInfoType || (EnvironmentInfoType = {}));
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
export var ValidationSeverity;
(function (ValidationSeverity) {
    ValidationSeverity["error"] = "error";
    ValidationSeverity["warning"] = "warning";
})(ValidationSeverity || (ValidationSeverity = {}));
