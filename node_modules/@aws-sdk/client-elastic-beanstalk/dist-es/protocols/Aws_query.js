import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseFloat as __strictParseFloat, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, withBaseException, } from "@smithy/smithy-client";
import { XMLParser } from "fast-xml-parser";
import { ElasticBeanstalkServiceException as __BaseException } from "../models/ElasticBeanstalkServiceException";
import { CodeBuildNotInServiceRegionException, ElasticBeanstalkServiceException, InsufficientPrivilegesException, InvalidRequestException, ManagedActionInvalidStateException, OperationInProgressException, PlatformVersionStillReferencedException, ResourceNotFoundException, ResourceTypeNotSupportedException, S3LocationNotInServiceRegionException, S3SubscriptionRequiredException, SourceBundleDeletionException, TooManyApplicationsException, TooManyApplicationVersionsException, TooManyBucketsException, TooManyConfigurationTemplatesException, TooManyEnvironmentsException, TooManyPlatformsException, TooManyTagsException, } from "../models/models_0";
export const se_AbortEnvironmentUpdateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AbortEnvironmentUpdateMessage(input, context),
        Action: "AbortEnvironmentUpdate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ApplyEnvironmentManagedActionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ApplyEnvironmentManagedActionRequest(input, context),
        Action: "ApplyEnvironmentManagedAction",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateEnvironmentOperationsRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateEnvironmentOperationsRoleMessage(input, context),
        Action: "AssociateEnvironmentOperationsRole",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CheckDNSAvailabilityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CheckDNSAvailabilityMessage(input, context),
        Action: "CheckDNSAvailability",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ComposeEnvironmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ComposeEnvironmentsMessage(input, context),
        Action: "ComposeEnvironments",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateApplicationMessage(input, context),
        Action: "CreateApplication",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateApplicationVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateApplicationVersionMessage(input, context),
        Action: "CreateApplicationVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateConfigurationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateConfigurationTemplateMessage(input, context),
        Action: "CreateConfigurationTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateEnvironmentMessage(input, context),
        Action: "CreateEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePlatformVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePlatformVersionRequest(input, context),
        Action: "CreatePlatformVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStorageLocationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        Action: "CreateStorageLocation",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteApplicationMessage(input, context),
        Action: "DeleteApplication",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteApplicationVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteApplicationVersionMessage(input, context),
        Action: "DeleteApplicationVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteConfigurationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteConfigurationTemplateMessage(input, context),
        Action: "DeleteConfigurationTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEnvironmentConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteEnvironmentConfigurationMessage(input, context),
        Action: "DeleteEnvironmentConfiguration",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePlatformVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePlatformVersionRequest(input, context),
        Action: "DeletePlatformVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAccountAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        Action: "DescribeAccountAttributes",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeApplicationsMessage(input, context),
        Action: "DescribeApplications",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeApplicationVersionsMessage(input, context),
        Action: "DescribeApplicationVersions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConfigurationOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeConfigurationOptionsMessage(input, context),
        Action: "DescribeConfigurationOptions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConfigurationSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeConfigurationSettingsMessage(input, context),
        Action: "DescribeConfigurationSettings",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentHealthCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentHealthRequest(input, context),
        Action: "DescribeEnvironmentHealth",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentManagedActionHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentManagedActionHistoryRequest(input, context),
        Action: "DescribeEnvironmentManagedActionHistory",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentManagedActionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentManagedActionsRequest(input, context),
        Action: "DescribeEnvironmentManagedActions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentResourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentResourcesMessage(input, context),
        Action: "DescribeEnvironmentResources",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentsMessage(input, context),
        Action: "DescribeEnvironments",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEventsMessage(input, context),
        Action: "DescribeEvents",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstancesHealthCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstancesHealthRequest(input, context),
        Action: "DescribeInstancesHealth",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePlatformVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePlatformVersionRequest(input, context),
        Action: "DescribePlatformVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateEnvironmentOperationsRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateEnvironmentOperationsRoleMessage(input, context),
        Action: "DisassociateEnvironmentOperationsRole",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailableSolutionStacksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        Action: "ListAvailableSolutionStacks",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPlatformBranchesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPlatformBranchesRequest(input, context),
        Action: "ListPlatformBranches",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPlatformVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPlatformVersionsRequest(input, context),
        Action: "ListPlatformVersions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTagsForResourceMessage(input, context),
        Action: "ListTagsForResource",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RebuildEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RebuildEnvironmentMessage(input, context),
        Action: "RebuildEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestEnvironmentInfoCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RequestEnvironmentInfoMessage(input, context),
        Action: "RequestEnvironmentInfo",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestartAppServerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestartAppServerMessage(input, context),
        Action: "RestartAppServer",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RetrieveEnvironmentInfoCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RetrieveEnvironmentInfoMessage(input, context),
        Action: "RetrieveEnvironmentInfo",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SwapEnvironmentCNAMEsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SwapEnvironmentCNAMEsMessage(input, context),
        Action: "SwapEnvironmentCNAMEs",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TerminateEnvironmentMessage(input, context),
        Action: "TerminateEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateApplicationMessage(input, context),
        Action: "UpdateApplication",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateApplicationResourceLifecycleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateApplicationResourceLifecycleMessage(input, context),
        Action: "UpdateApplicationResourceLifecycle",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateApplicationVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateApplicationVersionMessage(input, context),
        Action: "UpdateApplicationVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateConfigurationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateConfigurationTemplateMessage(input, context),
        Action: "UpdateConfigurationTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateEnvironmentMessage(input, context),
        Action: "UpdateEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTagsForResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateTagsForResourceMessage(input, context),
        Action: "UpdateTagsForResource",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ValidateConfigurationSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ValidateConfigurationSettingsMessage(input, context),
        Action: "ValidateConfigurationSettings",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AbortEnvironmentUpdateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AbortEnvironmentUpdateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AbortEnvironmentUpdateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_ApplyEnvironmentManagedActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ApplyEnvironmentManagedActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplyEnvironmentManagedActionResult(data.ApplyEnvironmentManagedActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ApplyEnvironmentManagedActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "ManagedActionInvalidStateException":
        case "com.amazonaws.elasticbeanstalk#ManagedActionInvalidStateException":
            throw await de_ManagedActionInvalidStateExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_AssociateEnvironmentOperationsRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_AssociateEnvironmentOperationsRoleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AssociateEnvironmentOperationsRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_CheckDNSAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CheckDNSAvailabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CheckDNSAvailabilityResultMessage(data.CheckDNSAvailabilityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CheckDNSAvailabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_ComposeEnvironmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ComposeEnvironmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescriptionsMessage(data.ComposeEnvironmentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ComposeEnvironmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "TooManyEnvironmentsException":
        case "com.amazonaws.elasticbeanstalk#TooManyEnvironmentsException":
            throw await de_TooManyEnvironmentsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateApplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationDescriptionMessage(data.CreateApplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TooManyApplicationsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationsException":
            throw await de_TooManyApplicationsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_CreateApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateApplicationVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationVersionDescriptionMessage(data.CreateApplicationVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateApplicationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeBuildNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#CodeBuildNotInServiceRegionException":
            throw await de_CodeBuildNotInServiceRegionExceptionRes(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "S3LocationNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#S3LocationNotInServiceRegionException":
            throw await de_S3LocationNotInServiceRegionExceptionRes(parsedOutput, context);
        case "TooManyApplicationVersionsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationVersionsException":
            throw await de_TooManyApplicationVersionsExceptionRes(parsedOutput, context);
        case "TooManyApplicationsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationsException":
            throw await de_TooManyApplicationsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_CreateConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateConfigurationTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsDescription(data.CreateConfigurationTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateConfigurationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        case "TooManyConfigurationTemplatesException":
        case "com.amazonaws.elasticbeanstalk#TooManyConfigurationTemplatesException":
            throw await de_TooManyConfigurationTemplatesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_CreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateEnvironmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescription(data.CreateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "TooManyEnvironmentsException":
        case "com.amazonaws.elasticbeanstalk#TooManyEnvironmentsException":
            throw await de_TooManyEnvironmentsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_CreatePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreatePlatformVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePlatformVersionResult(data.CreatePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePlatformVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "TooManyPlatformsException":
        case "com.amazonaws.elasticbeanstalk#TooManyPlatformsException":
            throw await de_TooManyPlatformsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_CreateStorageLocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CreateStorageLocationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateStorageLocationResultMessage(data.CreateStorageLocationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStorageLocationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "S3SubscriptionRequiredException":
        case "com.amazonaws.elasticbeanstalk#S3SubscriptionRequiredException":
            throw await de_S3SubscriptionRequiredExceptionRes(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteApplicationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DeleteApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteApplicationVersionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteApplicationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        case "S3LocationNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#S3LocationNotInServiceRegionException":
            throw await de_S3LocationNotInServiceRegionExceptionRes(parsedOutput, context);
        case "SourceBundleDeletionFailure":
        case "com.amazonaws.elasticbeanstalk#SourceBundleDeletionException":
            throw await de_SourceBundleDeletionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DeleteConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteConfigurationTemplateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteConfigurationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DeleteEnvironmentConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeleteEnvironmentConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEnvironmentConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_DeletePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DeletePlatformVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeletePlatformVersionResult(data.DeletePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeletePlatformVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        case "PlatformVersionStillReferencedException":
        case "com.amazonaws.elasticbeanstalk#PlatformVersionStillReferencedException":
            throw await de_PlatformVersionStillReferencedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeAccountAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAccountAttributesResult(data.DescribeAccountAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAccountAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeApplicationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationDescriptionsMessage(data.DescribeApplicationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeApplicationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_DescribeApplicationVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeApplicationVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationVersionDescriptionsMessage(data.DescribeApplicationVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeApplicationVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_DescribeConfigurationOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationOptionsDescription(data.DescribeConfigurationOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeConfigurationOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeConfigurationSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeConfigurationSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsDescriptions(data.DescribeConfigurationSettingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeConfigurationSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeEnvironmentHealthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEnvironmentHealthCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEnvironmentHealthResult(data.DescribeEnvironmentHealthResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEnvironmentHealthCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.elasticbeanstalk#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeEnvironmentManagedActionHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEnvironmentManagedActionHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEnvironmentManagedActionHistoryResult(data.DescribeEnvironmentManagedActionHistoryResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEnvironmentManagedActionHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeEnvironmentManagedActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEnvironmentManagedActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEnvironmentManagedActionsResult(data.DescribeEnvironmentManagedActionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEnvironmentManagedActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeEnvironmentResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEnvironmentResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentResourceDescriptionsMessage(data.DescribeEnvironmentResourcesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEnvironmentResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribeEnvironmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEnvironmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescriptionsMessage(data.DescribeEnvironmentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEnvironmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_DescribeEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EventDescriptionsMessage(data.DescribeEventsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_DescribeInstancesHealthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeInstancesHealthCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancesHealthResult(data.DescribeInstancesHealthResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstancesHealthCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.elasticbeanstalk#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DescribePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribePlatformVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePlatformVersionResult(data.DescribePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePlatformVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_DisassociateEnvironmentOperationsRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DisassociateEnvironmentOperationsRoleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisassociateEnvironmentOperationsRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_ListAvailableSolutionStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListAvailableSolutionStacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAvailableSolutionStacksResultMessage(data.ListAvailableSolutionStacksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAvailableSolutionStacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_ListPlatformBranchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPlatformBranchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPlatformBranchesResult(data.ListPlatformBranchesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPlatformBranchesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_ListPlatformVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListPlatformVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPlatformVersionsResult(data.ListPlatformVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPlatformVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResourceTagsDescriptionMessage(data.ListTagsForResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.elasticbeanstalk#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceTypeNotSupportedException":
        case "com.amazonaws.elasticbeanstalk#ResourceTypeNotSupportedException":
            throw await de_ResourceTypeNotSupportedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_RebuildEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RebuildEnvironmentCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RebuildEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_RequestEnvironmentInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RequestEnvironmentInfoCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RequestEnvironmentInfoCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_RestartAppServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RestartAppServerCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RestartAppServerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_RetrieveEnvironmentInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_RetrieveEnvironmentInfoCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RetrieveEnvironmentInfoResultMessage(data.RetrieveEnvironmentInfoResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RetrieveEnvironmentInfoCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_SwapEnvironmentCNAMEsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_SwapEnvironmentCNAMEsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_SwapEnvironmentCNAMEsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_TerminateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_TerminateEnvironmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescription(data.TerminateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TerminateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateApplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationDescriptionMessage(data.UpdateApplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_UpdateApplicationResourceLifecycleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateApplicationResourceLifecycleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationResourceLifecycleDescriptionMessage(data.UpdateApplicationResourceLifecycleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateApplicationResourceLifecycleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_UpdateApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateApplicationVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationVersionDescriptionMessage(data.UpdateApplicationVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateApplicationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode,
    });
};
export const de_UpdateConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateConfigurationTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsDescription(data.UpdateConfigurationTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateConfigurationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_UpdateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateEnvironmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescription(data.UpdateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_UpdateTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_UpdateTagsForResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.elasticbeanstalk#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceTypeNotSupportedException":
        case "com.amazonaws.elasticbeanstalk#ResourceTypeNotSupportedException":
            throw await de_ResourceTypeNotSupportedExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.elasticbeanstalk#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
export const de_ValidateConfigurationSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ValidateConfigurationSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsValidationMessages(data.ValidateConfigurationSettingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ValidateConfigurationSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CodeBuildNotInServiceRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CodeBuildNotInServiceRegionException(body.Error, context);
    const exception = new CodeBuildNotInServiceRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ElasticBeanstalkServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ElasticBeanstalkServiceException(body.Error, context);
    const exception = new ElasticBeanstalkServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsufficientPrivilegesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientPrivilegesException(body.Error, context);
    const exception = new InsufficientPrivilegesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidRequestException(body.Error, context);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ManagedActionInvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ManagedActionInvalidStateException(body.Error, context);
    const exception = new ManagedActionInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OperationInProgressException(body.Error, context);
    const exception = new OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PlatformVersionStillReferencedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PlatformVersionStillReferencedException(body.Error, context);
    const exception = new PlatformVersionStillReferencedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body.Error, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceTypeNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceTypeNotSupportedException(body.Error, context);
    const exception = new ResourceTypeNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_S3LocationNotInServiceRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_S3LocationNotInServiceRegionException(body.Error, context);
    const exception = new S3LocationNotInServiceRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_S3SubscriptionRequiredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_S3SubscriptionRequiredException(body.Error, context);
    const exception = new S3SubscriptionRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SourceBundleDeletionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SourceBundleDeletionException(body.Error, context);
    const exception = new SourceBundleDeletionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyApplicationsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyApplicationsException(body.Error, context);
    const exception = new TooManyApplicationsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyApplicationVersionsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyApplicationVersionsException(body.Error, context);
    const exception = new TooManyApplicationVersionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyBucketsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyBucketsException(body.Error, context);
    const exception = new TooManyBucketsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyConfigurationTemplatesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyConfigurationTemplatesException(body.Error, context);
    const exception = new TooManyConfigurationTemplatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyEnvironmentsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyEnvironmentsException(body.Error, context);
    const exception = new TooManyEnvironmentsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyPlatformsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyPlatformsException(body.Error, context);
    const exception = new TooManyPlatformsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyTagsException(body.Error, context);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AbortEnvironmentUpdateMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const se_ApplicationNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ApplicationResourceLifecycleConfig = (input, context) => {
    const entries = {};
    if (input.ServiceRole != null) {
        entries["ServiceRole"] = input.ServiceRole;
    }
    if (input.VersionLifecycleConfig != null) {
        const memberEntries = se_ApplicationVersionLifecycleConfig(input.VersionLifecycleConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ApplicationVersionLifecycleConfig = (input, context) => {
    const entries = {};
    if (input.MaxCountRule != null) {
        const memberEntries = se_MaxCountRule(input.MaxCountRule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaxCountRule.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxAgeRule != null) {
        const memberEntries = se_MaxAgeRule(input.MaxAgeRule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaxAgeRule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ApplyEnvironmentManagedActionRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.ActionId != null) {
        entries["ActionId"] = input.ActionId;
    }
    return entries;
};
const se_AssociateEnvironmentOperationsRoleMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.OperationsRole != null) {
        entries["OperationsRole"] = input.OperationsRole;
    }
    return entries;
};
const se_BuildConfiguration = (input, context) => {
    const entries = {};
    if (input.ArtifactName != null) {
        entries["ArtifactName"] = input.ArtifactName;
    }
    if (input.CodeBuildServiceRole != null) {
        entries["CodeBuildServiceRole"] = input.CodeBuildServiceRole;
    }
    if (input.ComputeType != null) {
        entries["ComputeType"] = input.ComputeType;
    }
    if (input.Image != null) {
        entries["Image"] = input.Image;
    }
    if (input.TimeoutInMinutes != null) {
        entries["TimeoutInMinutes"] = input.TimeoutInMinutes;
    }
    return entries;
};
const se_CheckDNSAvailabilityMessage = (input, context) => {
    const entries = {};
    if (input.CNAMEPrefix != null) {
        entries["CNAMEPrefix"] = input.CNAMEPrefix;
    }
    return entries;
};
const se_ComposeEnvironmentsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.VersionLabels != null) {
        const memberEntries = se_VersionLabels(input.VersionLabels, context);
        if (input.VersionLabels?.length === 0) {
            entries.VersionLabels = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLabels.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ConfigurationOptionSetting = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Namespace != null) {
        entries["Namespace"] = input.Namespace;
    }
    if (input.OptionName != null) {
        entries["OptionName"] = input.OptionName;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_ConfigurationOptionSettingsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ConfigurationOptionSetting(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_CreateApplicationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ResourceLifecycleConfig != null) {
        const memberEntries = se_ApplicationResourceLifecycleConfig(input.ResourceLifecycleConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_Tags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.SourceBuildInformation != null) {
        const memberEntries = se_SourceBuildInformation(input.SourceBuildInformation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceBuildInformation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourceBundle != null) {
        const memberEntries = se_S3Location(input.SourceBundle, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceBundle.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BuildConfiguration != null) {
        const memberEntries = se_BuildConfiguration(input.BuildConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BuildConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoCreateApplication != null) {
        entries["AutoCreateApplication"] = input.AutoCreateApplication;
    }
    if (input.Process != null) {
        entries["Process"] = input.Process;
    }
    if (input.Tags != null) {
        const memberEntries = se_Tags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.SourceConfiguration != null) {
        const memberEntries = se_SourceConfiguration(input.SourceConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.OptionSettings != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_Tags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.CNAMEPrefix != null) {
        entries["CNAMEPrefix"] = input.CNAMEPrefix;
    }
    if (input.Tier != null) {
        const memberEntries = se_EnvironmentTier(input.Tier, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tier.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_Tags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.OptionSettings != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = se_OptionsSpecifierList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationsRole != null) {
        entries["OperationsRole"] = input.OperationsRole;
    }
    return entries;
};
const se_CreatePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input.PlatformName != null) {
        entries["PlatformName"] = input.PlatformName;
    }
    if (input.PlatformVersion != null) {
        entries["PlatformVersion"] = input.PlatformVersion;
    }
    if (input.PlatformDefinitionBundle != null) {
        const memberEntries = se_S3Location(input.PlatformDefinitionBundle, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PlatformDefinitionBundle.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.OptionSettings != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = se_Tags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteApplicationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TerminateEnvByForce != null) {
        entries["TerminateEnvByForce"] = input.TerminateEnvByForce;
    }
    return entries;
};
const se_DeleteApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.DeleteSourceBundle != null) {
        entries["DeleteSourceBundle"] = input.DeleteSourceBundle;
    }
    return entries;
};
const se_DeleteConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const se_DeleteEnvironmentConfigurationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const se_DeletePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    return entries;
};
const se_DescribeApplicationsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationNames != null) {
        const memberEntries = se_ApplicationNamesList(input.ApplicationNames, context);
        if (input.ApplicationNames?.length === 0) {
            entries.ApplicationNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ApplicationNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeApplicationVersionsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabels != null) {
        const memberEntries = se_VersionLabelsList(input.VersionLabels, context);
        if (input.VersionLabels?.length === 0) {
            entries.VersionLabels = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLabels.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeConfigurationOptionsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.Options != null) {
        const memberEntries = se_OptionsSpecifierList(input.Options, context);
        if (input.Options?.length === 0) {
            entries.Options = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeConfigurationSettingsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const se_DescribeEnvironmentHealthRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.AttributeNames != null) {
        const memberEntries = se_EnvironmentHealthAttributes(input.AttributeNames, context);
        if (input.AttributeNames?.length === 0) {
            entries.AttributeNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeEnvironmentManagedActionHistoryRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
    }
    return entries;
};
const se_DescribeEnvironmentManagedActionsRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
const se_DescribeEnvironmentResourcesMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const se_DescribeEnvironmentsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.EnvironmentIds != null) {
        const memberEntries = se_EnvironmentIdList(input.EnvironmentIds, context);
        if (input.EnvironmentIds?.length === 0) {
            entries.EnvironmentIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnvironmentIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnvironmentNames != null) {
        const memberEntries = se_EnvironmentNamesList(input.EnvironmentNames, context);
        if (input.EnvironmentNames?.length === 0) {
            entries.EnvironmentNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnvironmentNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.IncludeDeleted != null) {
        entries["IncludeDeleted"] = input.IncludeDeleted;
    }
    if (input.IncludedDeletedBackTo != null) {
        entries["IncludedDeletedBackTo"] = input.IncludedDeletedBackTo.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeEventsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.RequestId != null) {
        entries["RequestId"] = input.RequestId;
    }
    if (input.Severity != null) {
        entries["Severity"] = input.Severity;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribeInstancesHealthRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.AttributeNames != null) {
        const memberEntries = se_InstancesHealthAttributes(input.AttributeNames, context);
        if (input.AttributeNames?.length === 0) {
            entries.AttributeNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_DescribePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    return entries;
};
const se_DisassociateEnvironmentOperationsRoleMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const se_EnvironmentHealthAttributes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EnvironmentIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EnvironmentNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EnvironmentTier = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Version != null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const se_InstancesHealthAttributes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ListPlatformBranchesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_SearchFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_ListPlatformVersionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = se_PlatformFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const se_ListTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    return entries;
};
const se_MaxAgeRule = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.MaxAgeInDays != null) {
        entries["MaxAgeInDays"] = input.MaxAgeInDays;
    }
    if (input.DeleteSourceFromS3 != null) {
        entries["DeleteSourceFromS3"] = input.DeleteSourceFromS3;
    }
    return entries;
};
const se_MaxCountRule = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.MaxCount != null) {
        entries["MaxCount"] = input.MaxCount;
    }
    if (input.DeleteSourceFromS3 != null) {
        entries["DeleteSourceFromS3"] = input.DeleteSourceFromS3;
    }
    return entries;
};
const se_OptionSpecification = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Namespace != null) {
        entries["Namespace"] = input.Namespace;
    }
    if (input.OptionName != null) {
        entries["OptionName"] = input.OptionName;
    }
    return entries;
};
const se_OptionsSpecifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_OptionSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PlatformFilter = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Operator != null) {
        entries["Operator"] = input.Operator;
    }
    if (input.Values != null) {
        const memberEntries = se_PlatformFilterValueList(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PlatformFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PlatformFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PlatformFilterValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RebuildEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const se_RequestEnvironmentInfoMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.InfoType != null) {
        entries["InfoType"] = input.InfoType;
    }
    return entries;
};
const se_RestartAppServerMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const se_RetrieveEnvironmentInfoMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.InfoType != null) {
        entries["InfoType"] = input.InfoType;
    }
    return entries;
};
const se_S3Location = (input, context) => {
    const entries = {};
    if (input.S3Bucket != null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Key != null) {
        entries["S3Key"] = input.S3Key;
    }
    return entries;
};
const se_SearchFilter = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.Operator != null) {
        entries["Operator"] = input.Operator;
    }
    if (input.Values != null) {
        const memberEntries = se_SearchFilterValues(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SearchFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SearchFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SearchFilterValues = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SourceBuildInformation = (input, context) => {
    const entries = {};
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.SourceRepository != null) {
        entries["SourceRepository"] = input.SourceRepository;
    }
    if (input.SourceLocation != null) {
        entries["SourceLocation"] = input.SourceLocation;
    }
    return entries;
};
const se_SourceConfiguration = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const se_SwapEnvironmentCNAMEsMessage = (input, context) => {
    const entries = {};
    if (input.SourceEnvironmentId != null) {
        entries["SourceEnvironmentId"] = input.SourceEnvironmentId;
    }
    if (input.SourceEnvironmentName != null) {
        entries["SourceEnvironmentName"] = input.SourceEnvironmentName;
    }
    if (input.DestinationEnvironmentId != null) {
        entries["DestinationEnvironmentId"] = input.DestinationEnvironmentId;
    }
    if (input.DestinationEnvironmentName != null) {
        entries["DestinationEnvironmentName"] = input.DestinationEnvironmentName;
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const se_TagKeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Tags = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TerminateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.TerminateResources != null) {
        entries["TerminateResources"] = input.TerminateResources;
    }
    if (input.ForceTerminate != null) {
        entries["ForceTerminate"] = input.ForceTerminate;
    }
    return entries;
};
const se_UpdateApplicationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_UpdateApplicationResourceLifecycleMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.ResourceLifecycleConfig != null) {
        const memberEntries = se_ApplicationResourceLifecycleConfig(input.ResourceLifecycleConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const se_UpdateConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.OptionSettings != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = se_OptionsSpecifierList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tier != null) {
        const memberEntries = se_EnvironmentTier(input.Tier, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tier.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.OptionSettings != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = se_OptionsSpecifierList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.TagsToAdd != null) {
        const memberEntries = se_TagList(input.TagsToAdd, context);
        if (input.TagsToAdd?.length === 0) {
            entries.TagsToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagsToAdd.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagsToRemove != null) {
        const memberEntries = se_TagKeyList(input.TagsToRemove, context);
        if (input.TagsToRemove?.length === 0) {
            entries.TagsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ValidateConfigurationSettingsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.OptionSettings != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_VersionLabels = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VersionLabelsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const de_ApplicationDescription = (output, context) => {
    const contents = {};
    if (output["ApplicationArn"] !== undefined) {
        contents.ApplicationArn = __expectString(output["ApplicationArn"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = __expectString(output["ApplicationName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateUpdated"]));
    }
    if (output.Versions === "") {
        contents.Versions = [];
    }
    else if (output["Versions"] !== undefined && output["Versions"]["member"] !== undefined) {
        contents.Versions = de_VersionLabelsList(__getArrayIfSingleItem(output["Versions"]["member"]), context);
    }
    if (output.ConfigurationTemplates === "") {
        contents.ConfigurationTemplates = [];
    }
    else if (output["ConfigurationTemplates"] !== undefined &&
        output["ConfigurationTemplates"]["member"] !== undefined) {
        contents.ConfigurationTemplates = de_ConfigurationTemplateNamesList(__getArrayIfSingleItem(output["ConfigurationTemplates"]["member"]), context);
    }
    if (output["ResourceLifecycleConfig"] !== undefined) {
        contents.ResourceLifecycleConfig = de_ApplicationResourceLifecycleConfig(output["ResourceLifecycleConfig"], context);
    }
    return contents;
};
const de_ApplicationDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationDescription(entry, context);
    });
};
const de_ApplicationDescriptionMessage = (output, context) => {
    const contents = {};
    if (output["Application"] !== undefined) {
        contents.Application = de_ApplicationDescription(output["Application"], context);
    }
    return contents;
};
const de_ApplicationDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.Applications === "") {
        contents.Applications = [];
    }
    else if (output["Applications"] !== undefined && output["Applications"]["member"] !== undefined) {
        contents.Applications = de_ApplicationDescriptionList(__getArrayIfSingleItem(output["Applications"]["member"]), context);
    }
    return contents;
};
const de_ApplicationMetrics = (output, context) => {
    const contents = {};
    if (output["Duration"] !== undefined) {
        contents.Duration = __strictParseInt32(output["Duration"]);
    }
    if (output["RequestCount"] !== undefined) {
        contents.RequestCount = __strictParseInt32(output["RequestCount"]);
    }
    if (output["StatusCodes"] !== undefined) {
        contents.StatusCodes = de_StatusCodes(output["StatusCodes"], context);
    }
    if (output["Latency"] !== undefined) {
        contents.Latency = de_Latency(output["Latency"], context);
    }
    return contents;
};
const de_ApplicationResourceLifecycleConfig = (output, context) => {
    const contents = {};
    if (output["ServiceRole"] !== undefined) {
        contents.ServiceRole = __expectString(output["ServiceRole"]);
    }
    if (output["VersionLifecycleConfig"] !== undefined) {
        contents.VersionLifecycleConfig = de_ApplicationVersionLifecycleConfig(output["VersionLifecycleConfig"], context);
    }
    return contents;
};
const de_ApplicationResourceLifecycleDescriptionMessage = (output, context) => {
    const contents = {};
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = __expectString(output["ApplicationName"]);
    }
    if (output["ResourceLifecycleConfig"] !== undefined) {
        contents.ResourceLifecycleConfig = de_ApplicationResourceLifecycleConfig(output["ResourceLifecycleConfig"], context);
    }
    return contents;
};
const de_ApplicationVersionDescription = (output, context) => {
    const contents = {};
    if (output["ApplicationVersionArn"] !== undefined) {
        contents.ApplicationVersionArn = __expectString(output["ApplicationVersionArn"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = __expectString(output["ApplicationName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = __expectString(output["VersionLabel"]);
    }
    if (output["SourceBuildInformation"] !== undefined) {
        contents.SourceBuildInformation = de_SourceBuildInformation(output["SourceBuildInformation"], context);
    }
    if (output["BuildArn"] !== undefined) {
        contents.BuildArn = __expectString(output["BuildArn"]);
    }
    if (output["SourceBundle"] !== undefined) {
        contents.SourceBundle = de_S3Location(output["SourceBundle"], context);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateUpdated"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const de_ApplicationVersionDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationVersionDescription(entry, context);
    });
};
const de_ApplicationVersionDescriptionMessage = (output, context) => {
    const contents = {};
    if (output["ApplicationVersion"] !== undefined) {
        contents.ApplicationVersion = de_ApplicationVersionDescription(output["ApplicationVersion"], context);
    }
    return contents;
};
const de_ApplicationVersionDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.ApplicationVersions === "") {
        contents.ApplicationVersions = [];
    }
    else if (output["ApplicationVersions"] !== undefined && output["ApplicationVersions"]["member"] !== undefined) {
        contents.ApplicationVersions = de_ApplicationVersionDescriptionList(__getArrayIfSingleItem(output["ApplicationVersions"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const de_ApplicationVersionLifecycleConfig = (output, context) => {
    const contents = {};
    if (output["MaxCountRule"] !== undefined) {
        contents.MaxCountRule = de_MaxCountRule(output["MaxCountRule"], context);
    }
    if (output["MaxAgeRule"] !== undefined) {
        contents.MaxAgeRule = de_MaxAgeRule(output["MaxAgeRule"], context);
    }
    return contents;
};
const de_ApplyEnvironmentManagedActionResult = (output, context) => {
    const contents = {};
    if (output["ActionId"] !== undefined) {
        contents.ActionId = __expectString(output["ActionId"]);
    }
    if (output["ActionDescription"] !== undefined) {
        contents.ActionDescription = __expectString(output["ActionDescription"]);
    }
    if (output["ActionType"] !== undefined) {
        contents.ActionType = __expectString(output["ActionType"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    return contents;
};
const de_AutoScalingGroup = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
const de_AutoScalingGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoScalingGroup(entry, context);
    });
};
const de_AvailableSolutionStackDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SolutionStackDescription(entry, context);
    });
};
const de_AvailableSolutionStackNamesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Builder = (output, context) => {
    const contents = {};
    if (output["ARN"] !== undefined) {
        contents.ARN = __expectString(output["ARN"]);
    }
    return contents;
};
const de_Causes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_CheckDNSAvailabilityResultMessage = (output, context) => {
    const contents = {};
    if (output["Available"] !== undefined) {
        contents.Available = __parseBoolean(output["Available"]);
    }
    if (output["FullyQualifiedCNAME"] !== undefined) {
        contents.FullyQualifiedCNAME = __expectString(output["FullyQualifiedCNAME"]);
    }
    return contents;
};
const de_CodeBuildNotInServiceRegionException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_ConfigurationOptionDescription = (output, context) => {
    const contents = {};
    if (output["Namespace"] !== undefined) {
        contents.Namespace = __expectString(output["Namespace"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["ChangeSeverity"] !== undefined) {
        contents.ChangeSeverity = __expectString(output["ChangeSeverity"]);
    }
    if (output["UserDefined"] !== undefined) {
        contents.UserDefined = __parseBoolean(output["UserDefined"]);
    }
    if (output["ValueType"] !== undefined) {
        contents.ValueType = __expectString(output["ValueType"]);
    }
    if (output.ValueOptions === "") {
        contents.ValueOptions = [];
    }
    else if (output["ValueOptions"] !== undefined && output["ValueOptions"]["member"] !== undefined) {
        contents.ValueOptions = de_ConfigurationOptionPossibleValues(__getArrayIfSingleItem(output["ValueOptions"]["member"]), context);
    }
    if (output["MinValue"] !== undefined) {
        contents.MinValue = __strictParseInt32(output["MinValue"]);
    }
    if (output["MaxValue"] !== undefined) {
        contents.MaxValue = __strictParseInt32(output["MaxValue"]);
    }
    if (output["MaxLength"] !== undefined) {
        contents.MaxLength = __strictParseInt32(output["MaxLength"]);
    }
    if (output["Regex"] !== undefined) {
        contents.Regex = de_OptionRestrictionRegex(output["Regex"], context);
    }
    return contents;
};
const de_ConfigurationOptionDescriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationOptionDescription(entry, context);
    });
};
const de_ConfigurationOptionPossibleValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_ConfigurationOptionsDescription = (output, context) => {
    const contents = {};
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = __expectString(output["SolutionStackName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = __expectString(output["PlatformArn"]);
    }
    if (output.Options === "") {
        contents.Options = [];
    }
    else if (output["Options"] !== undefined && output["Options"]["member"] !== undefined) {
        contents.Options = de_ConfigurationOptionDescriptionsList(__getArrayIfSingleItem(output["Options"]["member"]), context);
    }
    return contents;
};
const de_ConfigurationOptionSetting = (output, context) => {
    const contents = {};
    if (output["ResourceName"] !== undefined) {
        contents.ResourceName = __expectString(output["ResourceName"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = __expectString(output["Namespace"]);
    }
    if (output["OptionName"] !== undefined) {
        contents.OptionName = __expectString(output["OptionName"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
const de_ConfigurationOptionSettingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationOptionSetting(entry, context);
    });
};
const de_ConfigurationSettingsDescription = (output, context) => {
    const contents = {};
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = __expectString(output["SolutionStackName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = __expectString(output["PlatformArn"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = __expectString(output["ApplicationName"]);
    }
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = __expectString(output["EnvironmentName"]);
    }
    if (output["DeploymentStatus"] !== undefined) {
        contents.DeploymentStatus = __expectString(output["DeploymentStatus"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateUpdated"]));
    }
    if (output.OptionSettings === "") {
        contents.OptionSettings = [];
    }
    else if (output["OptionSettings"] !== undefined && output["OptionSettings"]["member"] !== undefined) {
        contents.OptionSettings = de_ConfigurationOptionSettingsList(__getArrayIfSingleItem(output["OptionSettings"]["member"]), context);
    }
    return contents;
};
const de_ConfigurationSettingsDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationSettingsDescription(entry, context);
    });
};
const de_ConfigurationSettingsDescriptions = (output, context) => {
    const contents = {};
    if (output.ConfigurationSettings === "") {
        contents.ConfigurationSettings = [];
    }
    else if (output["ConfigurationSettings"] !== undefined && output["ConfigurationSettings"]["member"] !== undefined) {
        contents.ConfigurationSettings = de_ConfigurationSettingsDescriptionList(__getArrayIfSingleItem(output["ConfigurationSettings"]["member"]), context);
    }
    return contents;
};
const de_ConfigurationSettingsValidationMessages = (output, context) => {
    const contents = {};
    if (output.Messages === "") {
        contents.Messages = [];
    }
    else if (output["Messages"] !== undefined && output["Messages"]["member"] !== undefined) {
        contents.Messages = de_ValidationMessagesList(__getArrayIfSingleItem(output["Messages"]["member"]), context);
    }
    return contents;
};
const de_ConfigurationTemplateNamesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_CPUUtilization = (output, context) => {
    const contents = {};
    if (output["User"] !== undefined) {
        contents.User = __strictParseFloat(output["User"]);
    }
    if (output["Nice"] !== undefined) {
        contents.Nice = __strictParseFloat(output["Nice"]);
    }
    if (output["System"] !== undefined) {
        contents.System = __strictParseFloat(output["System"]);
    }
    if (output["Idle"] !== undefined) {
        contents.Idle = __strictParseFloat(output["Idle"]);
    }
    if (output["IOWait"] !== undefined) {
        contents.IOWait = __strictParseFloat(output["IOWait"]);
    }
    if (output["IRQ"] !== undefined) {
        contents.IRQ = __strictParseFloat(output["IRQ"]);
    }
    if (output["SoftIRQ"] !== undefined) {
        contents.SoftIRQ = __strictParseFloat(output["SoftIRQ"]);
    }
    if (output["Privileged"] !== undefined) {
        contents.Privileged = __strictParseFloat(output["Privileged"]);
    }
    return contents;
};
const de_CreatePlatformVersionResult = (output, context) => {
    const contents = {};
    if (output["PlatformSummary"] !== undefined) {
        contents.PlatformSummary = de_PlatformSummary(output["PlatformSummary"], context);
    }
    if (output["Builder"] !== undefined) {
        contents.Builder = de_Builder(output["Builder"], context);
    }
    return contents;
};
const de_CreateStorageLocationResultMessage = (output, context) => {
    const contents = {};
    if (output["S3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["S3Bucket"]);
    }
    return contents;
};
const de_CustomAmi = (output, context) => {
    const contents = {};
    if (output["VirtualizationType"] !== undefined) {
        contents.VirtualizationType = __expectString(output["VirtualizationType"]);
    }
    if (output["ImageId"] !== undefined) {
        contents.ImageId = __expectString(output["ImageId"]);
    }
    return contents;
};
const de_CustomAmiList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomAmi(entry, context);
    });
};
const de_DeletePlatformVersionResult = (output, context) => {
    const contents = {};
    if (output["PlatformSummary"] !== undefined) {
        contents.PlatformSummary = de_PlatformSummary(output["PlatformSummary"], context);
    }
    return contents;
};
const de_Deployment = (output, context) => {
    const contents = {};
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = __expectString(output["VersionLabel"]);
    }
    if (output["DeploymentId"] !== undefined) {
        contents.DeploymentId = __strictParseLong(output["DeploymentId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["DeploymentTime"] !== undefined) {
        contents.DeploymentTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DeploymentTime"]));
    }
    return contents;
};
const de_DescribeAccountAttributesResult = (output, context) => {
    const contents = {};
    if (output["ResourceQuotas"] !== undefined) {
        contents.ResourceQuotas = de_ResourceQuotas(output["ResourceQuotas"], context);
    }
    return contents;
};
const de_DescribeEnvironmentHealthResult = (output, context) => {
    const contents = {};
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = __expectString(output["EnvironmentName"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = __expectString(output["HealthStatus"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["Color"] !== undefined) {
        contents.Color = __expectString(output["Color"]);
    }
    if (output.Causes === "") {
        contents.Causes = [];
    }
    else if (output["Causes"] !== undefined && output["Causes"]["member"] !== undefined) {
        contents.Causes = de_Causes(__getArrayIfSingleItem(output["Causes"]["member"]), context);
    }
    if (output["ApplicationMetrics"] !== undefined) {
        contents.ApplicationMetrics = de_ApplicationMetrics(output["ApplicationMetrics"], context);
    }
    if (output["InstancesHealth"] !== undefined) {
        contents.InstancesHealth = de_InstanceHealthSummary(output["InstancesHealth"], context);
    }
    if (output["RefreshedAt"] !== undefined) {
        contents.RefreshedAt = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["RefreshedAt"]));
    }
    return contents;
};
const de_DescribeEnvironmentManagedActionHistoryResult = (output, context) => {
    const contents = {};
    if (output.ManagedActionHistoryItems === "") {
        contents.ManagedActionHistoryItems = [];
    }
    else if (output["ManagedActionHistoryItems"] !== undefined &&
        output["ManagedActionHistoryItems"]["member"] !== undefined) {
        contents.ManagedActionHistoryItems = de_ManagedActionHistoryItems(__getArrayIfSingleItem(output["ManagedActionHistoryItems"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const de_DescribeEnvironmentManagedActionsResult = (output, context) => {
    const contents = {};
    if (output.ManagedActions === "") {
        contents.ManagedActions = [];
    }
    else if (output["ManagedActions"] !== undefined && output["ManagedActions"]["member"] !== undefined) {
        contents.ManagedActions = de_ManagedActions(__getArrayIfSingleItem(output["ManagedActions"]["member"]), context);
    }
    return contents;
};
const de_DescribeInstancesHealthResult = (output, context) => {
    const contents = {};
    if (output.InstanceHealthList === "") {
        contents.InstanceHealthList = [];
    }
    else if (output["InstanceHealthList"] !== undefined && output["InstanceHealthList"]["member"] !== undefined) {
        contents.InstanceHealthList = de_InstanceHealthList(__getArrayIfSingleItem(output["InstanceHealthList"]["member"]), context);
    }
    if (output["RefreshedAt"] !== undefined) {
        contents.RefreshedAt = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["RefreshedAt"]));
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const de_DescribePlatformVersionResult = (output, context) => {
    const contents = {};
    if (output["PlatformDescription"] !== undefined) {
        contents.PlatformDescription = de_PlatformDescription(output["PlatformDescription"], context);
    }
    return contents;
};
const de_ElasticBeanstalkServiceException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_EnvironmentDescription = (output, context) => {
    const contents = {};
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = __expectString(output["EnvironmentName"]);
    }
    if (output["EnvironmentId"] !== undefined) {
        contents.EnvironmentId = __expectString(output["EnvironmentId"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = __expectString(output["ApplicationName"]);
    }
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = __expectString(output["VersionLabel"]);
    }
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = __expectString(output["SolutionStackName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = __expectString(output["PlatformArn"]);
    }
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["EndpointURL"] !== undefined) {
        contents.EndpointURL = __expectString(output["EndpointURL"]);
    }
    if (output["CNAME"] !== undefined) {
        contents.CNAME = __expectString(output["CNAME"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateUpdated"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["AbortableOperationInProgress"] !== undefined) {
        contents.AbortableOperationInProgress = __parseBoolean(output["AbortableOperationInProgress"]);
    }
    if (output["Health"] !== undefined) {
        contents.Health = __expectString(output["Health"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = __expectString(output["HealthStatus"]);
    }
    if (output["Resources"] !== undefined) {
        contents.Resources = de_EnvironmentResourcesDescription(output["Resources"], context);
    }
    if (output["Tier"] !== undefined) {
        contents.Tier = de_EnvironmentTier(output["Tier"], context);
    }
    if (output.EnvironmentLinks === "") {
        contents.EnvironmentLinks = [];
    }
    else if (output["EnvironmentLinks"] !== undefined && output["EnvironmentLinks"]["member"] !== undefined) {
        contents.EnvironmentLinks = de_EnvironmentLinks(__getArrayIfSingleItem(output["EnvironmentLinks"]["member"]), context);
    }
    if (output["EnvironmentArn"] !== undefined) {
        contents.EnvironmentArn = __expectString(output["EnvironmentArn"]);
    }
    if (output["OperationsRole"] !== undefined) {
        contents.OperationsRole = __expectString(output["OperationsRole"]);
    }
    return contents;
};
const de_EnvironmentDescriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentDescription(entry, context);
    });
};
const de_EnvironmentDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.Environments === "") {
        contents.Environments = [];
    }
    else if (output["Environments"] !== undefined && output["Environments"]["member"] !== undefined) {
        contents.Environments = de_EnvironmentDescriptionsList(__getArrayIfSingleItem(output["Environments"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const de_EnvironmentInfoDescription = (output, context) => {
    const contents = {};
    if (output["InfoType"] !== undefined) {
        contents.InfoType = __expectString(output["InfoType"]);
    }
    if (output["Ec2InstanceId"] !== undefined) {
        contents.Ec2InstanceId = __expectString(output["Ec2InstanceId"]);
    }
    if (output["SampleTimestamp"] !== undefined) {
        contents.SampleTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["SampleTimestamp"]));
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const de_EnvironmentInfoDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentInfoDescription(entry, context);
    });
};
const de_EnvironmentLink = (output, context) => {
    const contents = {};
    if (output["LinkName"] !== undefined) {
        contents.LinkName = __expectString(output["LinkName"]);
    }
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = __expectString(output["EnvironmentName"]);
    }
    return contents;
};
const de_EnvironmentLinks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentLink(entry, context);
    });
};
const de_EnvironmentResourceDescription = (output, context) => {
    const contents = {};
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = __expectString(output["EnvironmentName"]);
    }
    if (output.AutoScalingGroups === "") {
        contents.AutoScalingGroups = [];
    }
    else if (output["AutoScalingGroups"] !== undefined && output["AutoScalingGroups"]["member"] !== undefined) {
        contents.AutoScalingGroups = de_AutoScalingGroupList(__getArrayIfSingleItem(output["AutoScalingGroups"]["member"]), context);
    }
    if (output.Instances === "") {
        contents.Instances = [];
    }
    else if (output["Instances"] !== undefined && output["Instances"]["member"] !== undefined) {
        contents.Instances = de_InstanceList(__getArrayIfSingleItem(output["Instances"]["member"]), context);
    }
    if (output.LaunchConfigurations === "") {
        contents.LaunchConfigurations = [];
    }
    else if (output["LaunchConfigurations"] !== undefined && output["LaunchConfigurations"]["member"] !== undefined) {
        contents.LaunchConfigurations = de_LaunchConfigurationList(__getArrayIfSingleItem(output["LaunchConfigurations"]["member"]), context);
    }
    if (output.LaunchTemplates === "") {
        contents.LaunchTemplates = [];
    }
    else if (output["LaunchTemplates"] !== undefined && output["LaunchTemplates"]["member"] !== undefined) {
        contents.LaunchTemplates = de_LaunchTemplateList(__getArrayIfSingleItem(output["LaunchTemplates"]["member"]), context);
    }
    if (output.LoadBalancers === "") {
        contents.LoadBalancers = [];
    }
    else if (output["LoadBalancers"] !== undefined && output["LoadBalancers"]["member"] !== undefined) {
        contents.LoadBalancers = de_LoadBalancerList(__getArrayIfSingleItem(output["LoadBalancers"]["member"]), context);
    }
    if (output.Triggers === "") {
        contents.Triggers = [];
    }
    else if (output["Triggers"] !== undefined && output["Triggers"]["member"] !== undefined) {
        contents.Triggers = de_TriggerList(__getArrayIfSingleItem(output["Triggers"]["member"]), context);
    }
    if (output.Queues === "") {
        contents.Queues = [];
    }
    else if (output["Queues"] !== undefined && output["Queues"]["member"] !== undefined) {
        contents.Queues = de_QueueList(__getArrayIfSingleItem(output["Queues"]["member"]), context);
    }
    return contents;
};
const de_EnvironmentResourceDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output["EnvironmentResources"] !== undefined) {
        contents.EnvironmentResources = de_EnvironmentResourceDescription(output["EnvironmentResources"], context);
    }
    return contents;
};
const de_EnvironmentResourcesDescription = (output, context) => {
    const contents = {};
    if (output["LoadBalancer"] !== undefined) {
        contents.LoadBalancer = de_LoadBalancerDescription(output["LoadBalancer"], context);
    }
    return contents;
};
const de_EnvironmentTier = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = __expectString(output["Version"]);
    }
    return contents;
};
const de_EventDescription = (output, context) => {
    const contents = {};
    if (output["EventDate"] !== undefined) {
        contents.EventDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["EventDate"]));
    }
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = __expectString(output["ApplicationName"]);
    }
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = __expectString(output["VersionLabel"]);
    }
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = __expectString(output["TemplateName"]);
    }
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = __expectString(output["EnvironmentName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = __expectString(output["PlatformArn"]);
    }
    if (output["RequestId"] !== undefined) {
        contents.RequestId = __expectString(output["RequestId"]);
    }
    if (output["Severity"] !== undefined) {
        contents.Severity = __expectString(output["Severity"]);
    }
    return contents;
};
const de_EventDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventDescription(entry, context);
    });
};
const de_EventDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.Events === "") {
        contents.Events = [];
    }
    else if (output["Events"] !== undefined && output["Events"]["member"] !== undefined) {
        contents.Events = de_EventDescriptionList(__getArrayIfSingleItem(output["Events"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const de_Instance = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    return contents;
};
const de_InstanceHealthList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SingleInstanceHealth(entry, context);
    });
};
const de_InstanceHealthSummary = (output, context) => {
    const contents = {};
    if (output["NoData"] !== undefined) {
        contents.NoData = __strictParseInt32(output["NoData"]);
    }
    if (output["Unknown"] !== undefined) {
        contents.Unknown = __strictParseInt32(output["Unknown"]);
    }
    if (output["Pending"] !== undefined) {
        contents.Pending = __strictParseInt32(output["Pending"]);
    }
    if (output["Ok"] !== undefined) {
        contents.Ok = __strictParseInt32(output["Ok"]);
    }
    if (output["Info"] !== undefined) {
        contents.Info = __strictParseInt32(output["Info"]);
    }
    if (output["Warning"] !== undefined) {
        contents.Warning = __strictParseInt32(output["Warning"]);
    }
    if (output["Degraded"] !== undefined) {
        contents.Degraded = __strictParseInt32(output["Degraded"]);
    }
    if (output["Severe"] !== undefined) {
        contents.Severe = __strictParseInt32(output["Severe"]);
    }
    return contents;
};
const de_InstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
};
const de_InsufficientPrivilegesException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_InvalidRequestException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_Latency = (output, context) => {
    const contents = {};
    if (output["P999"] !== undefined) {
        contents.P999 = __strictParseFloat(output["P999"]);
    }
    if (output["P99"] !== undefined) {
        contents.P99 = __strictParseFloat(output["P99"]);
    }
    if (output["P95"] !== undefined) {
        contents.P95 = __strictParseFloat(output["P95"]);
    }
    if (output["P90"] !== undefined) {
        contents.P90 = __strictParseFloat(output["P90"]);
    }
    if (output["P85"] !== undefined) {
        contents.P85 = __strictParseFloat(output["P85"]);
    }
    if (output["P75"] !== undefined) {
        contents.P75 = __strictParseFloat(output["P75"]);
    }
    if (output["P50"] !== undefined) {
        contents.P50 = __strictParseFloat(output["P50"]);
    }
    if (output["P10"] !== undefined) {
        contents.P10 = __strictParseFloat(output["P10"]);
    }
    return contents;
};
const de_LaunchConfiguration = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
const de_LaunchConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchConfiguration(entry, context);
    });
};
const de_LaunchTemplate = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    return contents;
};
const de_LaunchTemplateList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplate(entry, context);
    });
};
const de_ListAvailableSolutionStacksResultMessage = (output, context) => {
    const contents = {};
    if (output.SolutionStacks === "") {
        contents.SolutionStacks = [];
    }
    else if (output["SolutionStacks"] !== undefined && output["SolutionStacks"]["member"] !== undefined) {
        contents.SolutionStacks = de_AvailableSolutionStackNamesList(__getArrayIfSingleItem(output["SolutionStacks"]["member"]), context);
    }
    if (output.SolutionStackDetails === "") {
        contents.SolutionStackDetails = [];
    }
    else if (output["SolutionStackDetails"] !== undefined && output["SolutionStackDetails"]["member"] !== undefined) {
        contents.SolutionStackDetails = de_AvailableSolutionStackDetailsList(__getArrayIfSingleItem(output["SolutionStackDetails"]["member"]), context);
    }
    return contents;
};
const de_Listener = (output, context) => {
    const contents = {};
    if (output["Protocol"] !== undefined) {
        contents.Protocol = __expectString(output["Protocol"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = __strictParseInt32(output["Port"]);
    }
    return contents;
};
const de_ListPlatformBranchesResult = (output, context) => {
    const contents = {};
    if (output.PlatformBranchSummaryList === "") {
        contents.PlatformBranchSummaryList = [];
    }
    else if (output["PlatformBranchSummaryList"] !== undefined &&
        output["PlatformBranchSummaryList"]["member"] !== undefined) {
        contents.PlatformBranchSummaryList = de_PlatformBranchSummaryList(__getArrayIfSingleItem(output["PlatformBranchSummaryList"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const de_ListPlatformVersionsResult = (output, context) => {
    const contents = {};
    if (output.PlatformSummaryList === "") {
        contents.PlatformSummaryList = [];
    }
    else if (output["PlatformSummaryList"] !== undefined && output["PlatformSummaryList"]["member"] !== undefined) {
        contents.PlatformSummaryList = de_PlatformSummaryList(__getArrayIfSingleItem(output["PlatformSummaryList"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const de_LoadAverage = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __strictParseFloat(entry);
    });
};
const de_LoadBalancer = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
const de_LoadBalancerDescription = (output, context) => {
    const contents = {};
    if (output["LoadBalancerName"] !== undefined) {
        contents.LoadBalancerName = __expectString(output["LoadBalancerName"]);
    }
    if (output["Domain"] !== undefined) {
        contents.Domain = __expectString(output["Domain"]);
    }
    if (output.Listeners === "") {
        contents.Listeners = [];
    }
    else if (output["Listeners"] !== undefined && output["Listeners"]["member"] !== undefined) {
        contents.Listeners = de_LoadBalancerListenersDescription(__getArrayIfSingleItem(output["Listeners"]["member"]), context);
    }
    return contents;
};
const de_LoadBalancerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadBalancer(entry, context);
    });
};
const de_LoadBalancerListenersDescription = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Listener(entry, context);
    });
};
const de_ManagedAction = (output, context) => {
    const contents = {};
    if (output["ActionId"] !== undefined) {
        contents.ActionId = __expectString(output["ActionId"]);
    }
    if (output["ActionDescription"] !== undefined) {
        contents.ActionDescription = __expectString(output["ActionDescription"]);
    }
    if (output["ActionType"] !== undefined) {
        contents.ActionType = __expectString(output["ActionType"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["WindowStartTime"] !== undefined) {
        contents.WindowStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["WindowStartTime"]));
    }
    return contents;
};
const de_ManagedActionHistoryItem = (output, context) => {
    const contents = {};
    if (output["ActionId"] !== undefined) {
        contents.ActionId = __expectString(output["ActionId"]);
    }
    if (output["ActionType"] !== undefined) {
        contents.ActionType = __expectString(output["ActionType"]);
    }
    if (output["ActionDescription"] !== undefined) {
        contents.ActionDescription = __expectString(output["ActionDescription"]);
    }
    if (output["FailureType"] !== undefined) {
        contents.FailureType = __expectString(output["FailureType"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["FailureDescription"] !== undefined) {
        contents.FailureDescription = __expectString(output["FailureDescription"]);
    }
    if (output["ExecutedTime"] !== undefined) {
        contents.ExecutedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["ExecutedTime"]));
    }
    if (output["FinishedTime"] !== undefined) {
        contents.FinishedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["FinishedTime"]));
    }
    return contents;
};
const de_ManagedActionHistoryItems = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedActionHistoryItem(entry, context);
    });
};
const de_ManagedActionInvalidStateException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_ManagedActions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedAction(entry, context);
    });
};
const de_MaxAgeRule = (output, context) => {
    const contents = {};
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["MaxAgeInDays"] !== undefined) {
        contents.MaxAgeInDays = __strictParseInt32(output["MaxAgeInDays"]);
    }
    if (output["DeleteSourceFromS3"] !== undefined) {
        contents.DeleteSourceFromS3 = __parseBoolean(output["DeleteSourceFromS3"]);
    }
    return contents;
};
const de_MaxCountRule = (output, context) => {
    const contents = {};
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["MaxCount"] !== undefined) {
        contents.MaxCount = __strictParseInt32(output["MaxCount"]);
    }
    if (output["DeleteSourceFromS3"] !== undefined) {
        contents.DeleteSourceFromS3 = __parseBoolean(output["DeleteSourceFromS3"]);
    }
    return contents;
};
const de_OperationInProgressException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_OptionRestrictionRegex = (output, context) => {
    const contents = {};
    if (output["Pattern"] !== undefined) {
        contents.Pattern = __expectString(output["Pattern"]);
    }
    if (output["Label"] !== undefined) {
        contents.Label = __expectString(output["Label"]);
    }
    return contents;
};
const de_PlatformBranchSummary = (output, context) => {
    const contents = {};
    if (output["PlatformName"] !== undefined) {
        contents.PlatformName = __expectString(output["PlatformName"]);
    }
    if (output["BranchName"] !== undefined) {
        contents.BranchName = __expectString(output["BranchName"]);
    }
    if (output["LifecycleState"] !== undefined) {
        contents.LifecycleState = __expectString(output["LifecycleState"]);
    }
    if (output["BranchOrder"] !== undefined) {
        contents.BranchOrder = __strictParseInt32(output["BranchOrder"]);
    }
    if (output.SupportedTierList === "") {
        contents.SupportedTierList = [];
    }
    else if (output["SupportedTierList"] !== undefined && output["SupportedTierList"]["member"] !== undefined) {
        contents.SupportedTierList = de_SupportedTierList(__getArrayIfSingleItem(output["SupportedTierList"]["member"]), context);
    }
    return contents;
};
const de_PlatformBranchSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformBranchSummary(entry, context);
    });
};
const de_PlatformDescription = (output, context) => {
    const contents = {};
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = __expectString(output["PlatformArn"]);
    }
    if (output["PlatformOwner"] !== undefined) {
        contents.PlatformOwner = __expectString(output["PlatformOwner"]);
    }
    if (output["PlatformName"] !== undefined) {
        contents.PlatformName = __expectString(output["PlatformName"]);
    }
    if (output["PlatformVersion"] !== undefined) {
        contents.PlatformVersion = __expectString(output["PlatformVersion"]);
    }
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = __expectString(output["SolutionStackName"]);
    }
    if (output["PlatformStatus"] !== undefined) {
        contents.PlatformStatus = __expectString(output["PlatformStatus"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DateUpdated"]));
    }
    if (output["PlatformCategory"] !== undefined) {
        contents.PlatformCategory = __expectString(output["PlatformCategory"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["Maintainer"] !== undefined) {
        contents.Maintainer = __expectString(output["Maintainer"]);
    }
    if (output["OperatingSystemName"] !== undefined) {
        contents.OperatingSystemName = __expectString(output["OperatingSystemName"]);
    }
    if (output["OperatingSystemVersion"] !== undefined) {
        contents.OperatingSystemVersion = __expectString(output["OperatingSystemVersion"]);
    }
    if (output.ProgrammingLanguages === "") {
        contents.ProgrammingLanguages = [];
    }
    else if (output["ProgrammingLanguages"] !== undefined && output["ProgrammingLanguages"]["member"] !== undefined) {
        contents.ProgrammingLanguages = de_PlatformProgrammingLanguages(__getArrayIfSingleItem(output["ProgrammingLanguages"]["member"]), context);
    }
    if (output.Frameworks === "") {
        contents.Frameworks = [];
    }
    else if (output["Frameworks"] !== undefined && output["Frameworks"]["member"] !== undefined) {
        contents.Frameworks = de_PlatformFrameworks(__getArrayIfSingleItem(output["Frameworks"]["member"]), context);
    }
    if (output.CustomAmiList === "") {
        contents.CustomAmiList = [];
    }
    else if (output["CustomAmiList"] !== undefined && output["CustomAmiList"]["member"] !== undefined) {
        contents.CustomAmiList = de_CustomAmiList(__getArrayIfSingleItem(output["CustomAmiList"]["member"]), context);
    }
    if (output.SupportedTierList === "") {
        contents.SupportedTierList = [];
    }
    else if (output["SupportedTierList"] !== undefined && output["SupportedTierList"]["member"] !== undefined) {
        contents.SupportedTierList = de_SupportedTierList(__getArrayIfSingleItem(output["SupportedTierList"]["member"]), context);
    }
    if (output.SupportedAddonList === "") {
        contents.SupportedAddonList = [];
    }
    else if (output["SupportedAddonList"] !== undefined && output["SupportedAddonList"]["member"] !== undefined) {
        contents.SupportedAddonList = de_SupportedAddonList(__getArrayIfSingleItem(output["SupportedAddonList"]["member"]), context);
    }
    if (output["PlatformLifecycleState"] !== undefined) {
        contents.PlatformLifecycleState = __expectString(output["PlatformLifecycleState"]);
    }
    if (output["PlatformBranchName"] !== undefined) {
        contents.PlatformBranchName = __expectString(output["PlatformBranchName"]);
    }
    if (output["PlatformBranchLifecycleState"] !== undefined) {
        contents.PlatformBranchLifecycleState = __expectString(output["PlatformBranchLifecycleState"]);
    }
    return contents;
};
const de_PlatformFramework = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = __expectString(output["Version"]);
    }
    return contents;
};
const de_PlatformFrameworks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformFramework(entry, context);
    });
};
const de_PlatformProgrammingLanguage = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = __expectString(output["Version"]);
    }
    return contents;
};
const de_PlatformProgrammingLanguages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformProgrammingLanguage(entry, context);
    });
};
const de_PlatformSummary = (output, context) => {
    const contents = {};
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = __expectString(output["PlatformArn"]);
    }
    if (output["PlatformOwner"] !== undefined) {
        contents.PlatformOwner = __expectString(output["PlatformOwner"]);
    }
    if (output["PlatformStatus"] !== undefined) {
        contents.PlatformStatus = __expectString(output["PlatformStatus"]);
    }
    if (output["PlatformCategory"] !== undefined) {
        contents.PlatformCategory = __expectString(output["PlatformCategory"]);
    }
    if (output["OperatingSystemName"] !== undefined) {
        contents.OperatingSystemName = __expectString(output["OperatingSystemName"]);
    }
    if (output["OperatingSystemVersion"] !== undefined) {
        contents.OperatingSystemVersion = __expectString(output["OperatingSystemVersion"]);
    }
    if (output.SupportedTierList === "") {
        contents.SupportedTierList = [];
    }
    else if (output["SupportedTierList"] !== undefined && output["SupportedTierList"]["member"] !== undefined) {
        contents.SupportedTierList = de_SupportedTierList(__getArrayIfSingleItem(output["SupportedTierList"]["member"]), context);
    }
    if (output.SupportedAddonList === "") {
        contents.SupportedAddonList = [];
    }
    else if (output["SupportedAddonList"] !== undefined && output["SupportedAddonList"]["member"] !== undefined) {
        contents.SupportedAddonList = de_SupportedAddonList(__getArrayIfSingleItem(output["SupportedAddonList"]["member"]), context);
    }
    if (output["PlatformLifecycleState"] !== undefined) {
        contents.PlatformLifecycleState = __expectString(output["PlatformLifecycleState"]);
    }
    if (output["PlatformVersion"] !== undefined) {
        contents.PlatformVersion = __expectString(output["PlatformVersion"]);
    }
    if (output["PlatformBranchName"] !== undefined) {
        contents.PlatformBranchName = __expectString(output["PlatformBranchName"]);
    }
    if (output["PlatformBranchLifecycleState"] !== undefined) {
        contents.PlatformBranchLifecycleState = __expectString(output["PlatformBranchLifecycleState"]);
    }
    return contents;
};
const de_PlatformSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformSummary(entry, context);
    });
};
const de_PlatformVersionStillReferencedException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_Queue = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["URL"] !== undefined) {
        contents.URL = __expectString(output["URL"]);
    }
    return contents;
};
const de_QueueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Queue(entry, context);
    });
};
const de_ResourceNotFoundException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_ResourceQuota = (output, context) => {
    const contents = {};
    if (output["Maximum"] !== undefined) {
        contents.Maximum = __strictParseInt32(output["Maximum"]);
    }
    return contents;
};
const de_ResourceQuotas = (output, context) => {
    const contents = {};
    if (output["ApplicationQuota"] !== undefined) {
        contents.ApplicationQuota = de_ResourceQuota(output["ApplicationQuota"], context);
    }
    if (output["ApplicationVersionQuota"] !== undefined) {
        contents.ApplicationVersionQuota = de_ResourceQuota(output["ApplicationVersionQuota"], context);
    }
    if (output["EnvironmentQuota"] !== undefined) {
        contents.EnvironmentQuota = de_ResourceQuota(output["EnvironmentQuota"], context);
    }
    if (output["ConfigurationTemplateQuota"] !== undefined) {
        contents.ConfigurationTemplateQuota = de_ResourceQuota(output["ConfigurationTemplateQuota"], context);
    }
    if (output["CustomPlatformQuota"] !== undefined) {
        contents.CustomPlatformQuota = de_ResourceQuota(output["CustomPlatformQuota"], context);
    }
    return contents;
};
const de_ResourceTagsDescriptionMessage = (output, context) => {
    const contents = {};
    if (output["ResourceArn"] !== undefined) {
        contents.ResourceArn = __expectString(output["ResourceArn"]);
    }
    if (output.ResourceTags === "") {
        contents.ResourceTags = [];
    }
    else if (output["ResourceTags"] !== undefined && output["ResourceTags"]["member"] !== undefined) {
        contents.ResourceTags = de_TagList(__getArrayIfSingleItem(output["ResourceTags"]["member"]), context);
    }
    return contents;
};
const de_ResourceTypeNotSupportedException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_RetrieveEnvironmentInfoResultMessage = (output, context) => {
    const contents = {};
    if (output.EnvironmentInfo === "") {
        contents.EnvironmentInfo = [];
    }
    else if (output["EnvironmentInfo"] !== undefined && output["EnvironmentInfo"]["member"] !== undefined) {
        contents.EnvironmentInfo = de_EnvironmentInfoDescriptionList(__getArrayIfSingleItem(output["EnvironmentInfo"]["member"]), context);
    }
    return contents;
};
const de_S3Location = (output, context) => {
    const contents = {};
    if (output["S3Bucket"] !== undefined) {
        contents.S3Bucket = __expectString(output["S3Bucket"]);
    }
    if (output["S3Key"] !== undefined) {
        contents.S3Key = __expectString(output["S3Key"]);
    }
    return contents;
};
const de_S3LocationNotInServiceRegionException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_S3SubscriptionRequiredException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_SingleInstanceHealth = (output, context) => {
    const contents = {};
    if (output["InstanceId"] !== undefined) {
        contents.InstanceId = __expectString(output["InstanceId"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = __expectString(output["HealthStatus"]);
    }
    if (output["Color"] !== undefined) {
        contents.Color = __expectString(output["Color"]);
    }
    if (output.Causes === "") {
        contents.Causes = [];
    }
    else if (output["Causes"] !== undefined && output["Causes"]["member"] !== undefined) {
        contents.Causes = de_Causes(__getArrayIfSingleItem(output["Causes"]["member"]), context);
    }
    if (output["LaunchedAt"] !== undefined) {
        contents.LaunchedAt = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LaunchedAt"]));
    }
    if (output["ApplicationMetrics"] !== undefined) {
        contents.ApplicationMetrics = de_ApplicationMetrics(output["ApplicationMetrics"], context);
    }
    if (output["System"] !== undefined) {
        contents.System = de_SystemStatus(output["System"], context);
    }
    if (output["Deployment"] !== undefined) {
        contents.Deployment = de_Deployment(output["Deployment"], context);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = __expectString(output["AvailabilityZone"]);
    }
    if (output["InstanceType"] !== undefined) {
        contents.InstanceType = __expectString(output["InstanceType"]);
    }
    return contents;
};
const de_SolutionStackDescription = (output, context) => {
    const contents = {};
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = __expectString(output["SolutionStackName"]);
    }
    if (output.PermittedFileTypes === "") {
        contents.PermittedFileTypes = [];
    }
    else if (output["PermittedFileTypes"] !== undefined && output["PermittedFileTypes"]["member"] !== undefined) {
        contents.PermittedFileTypes = de_SolutionStackFileTypeList(__getArrayIfSingleItem(output["PermittedFileTypes"]["member"]), context);
    }
    return contents;
};
const de_SolutionStackFileTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SourceBuildInformation = (output, context) => {
    const contents = {};
    if (output["SourceType"] !== undefined) {
        contents.SourceType = __expectString(output["SourceType"]);
    }
    if (output["SourceRepository"] !== undefined) {
        contents.SourceRepository = __expectString(output["SourceRepository"]);
    }
    if (output["SourceLocation"] !== undefined) {
        contents.SourceLocation = __expectString(output["SourceLocation"]);
    }
    return contents;
};
const de_SourceBundleDeletionException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_StatusCodes = (output, context) => {
    const contents = {};
    if (output["Status2xx"] !== undefined) {
        contents.Status2xx = __strictParseInt32(output["Status2xx"]);
    }
    if (output["Status3xx"] !== undefined) {
        contents.Status3xx = __strictParseInt32(output["Status3xx"]);
    }
    if (output["Status4xx"] !== undefined) {
        contents.Status4xx = __strictParseInt32(output["Status4xx"]);
    }
    if (output["Status5xx"] !== undefined) {
        contents.Status5xx = __strictParseInt32(output["Status5xx"]);
    }
    return contents;
};
const de_SupportedAddonList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SupportedTierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SystemStatus = (output, context) => {
    const contents = {};
    if (output["CPUUtilization"] !== undefined) {
        contents.CPUUtilization = de_CPUUtilization(output["CPUUtilization"], context);
    }
    if (output.LoadAverage === "") {
        contents.LoadAverage = [];
    }
    else if (output["LoadAverage"] !== undefined && output["LoadAverage"]["member"] !== undefined) {
        contents.LoadAverage = de_LoadAverage(__getArrayIfSingleItem(output["LoadAverage"]["member"]), context);
    }
    return contents;
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
        contents.Key = __expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry, context);
    });
};
const de_TooManyApplicationsException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_TooManyApplicationVersionsException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_TooManyBucketsException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_TooManyConfigurationTemplatesException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_TooManyEnvironmentsException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_TooManyPlatformsException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_TooManyTagsException = (output, context) => {
    const contents = {};
    if (output["message"] !== undefined) {
        contents.message = __expectString(output["message"]);
    }
    return contents;
};
const de_Trigger = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    return contents;
};
const de_TriggerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Trigger(entry, context);
    });
};
const de_ValidationMessage = (output, context) => {
    const contents = {};
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    if (output["Severity"] !== undefined) {
        contents.Severity = __expectString(output["Severity"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = __expectString(output["Namespace"]);
    }
    if (output["OptionName"] !== undefined) {
        contents.OptionName = __expectString(output["OptionName"]);
    }
    return contents;
};
const de_ValidationMessagesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationMessage(entry, context);
    });
};
const de_VersionLabelsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
