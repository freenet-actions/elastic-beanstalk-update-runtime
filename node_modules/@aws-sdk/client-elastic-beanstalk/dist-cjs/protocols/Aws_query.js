"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_queryAssociateEnvironmentOperationsRoleCommand = exports.deserializeAws_queryApplyEnvironmentManagedActionCommand = exports.deserializeAws_queryAbortEnvironmentUpdateCommand = exports.serializeAws_queryValidateConfigurationSettingsCommand = exports.serializeAws_queryUpdateTagsForResourceCommand = exports.serializeAws_queryUpdateEnvironmentCommand = exports.serializeAws_queryUpdateConfigurationTemplateCommand = exports.serializeAws_queryUpdateApplicationVersionCommand = exports.serializeAws_queryUpdateApplicationResourceLifecycleCommand = exports.serializeAws_queryUpdateApplicationCommand = exports.serializeAws_queryTerminateEnvironmentCommand = exports.serializeAws_querySwapEnvironmentCNAMEsCommand = exports.serializeAws_queryRetrieveEnvironmentInfoCommand = exports.serializeAws_queryRestartAppServerCommand = exports.serializeAws_queryRequestEnvironmentInfoCommand = exports.serializeAws_queryRebuildEnvironmentCommand = exports.serializeAws_queryListTagsForResourceCommand = exports.serializeAws_queryListPlatformVersionsCommand = exports.serializeAws_queryListPlatformBranchesCommand = exports.serializeAws_queryListAvailableSolutionStacksCommand = exports.serializeAws_queryDisassociateEnvironmentOperationsRoleCommand = exports.serializeAws_queryDescribePlatformVersionCommand = exports.serializeAws_queryDescribeInstancesHealthCommand = exports.serializeAws_queryDescribeEventsCommand = exports.serializeAws_queryDescribeEnvironmentsCommand = exports.serializeAws_queryDescribeEnvironmentResourcesCommand = exports.serializeAws_queryDescribeEnvironmentManagedActionsCommand = exports.serializeAws_queryDescribeEnvironmentManagedActionHistoryCommand = exports.serializeAws_queryDescribeEnvironmentHealthCommand = exports.serializeAws_queryDescribeConfigurationSettingsCommand = exports.serializeAws_queryDescribeConfigurationOptionsCommand = exports.serializeAws_queryDescribeApplicationVersionsCommand = exports.serializeAws_queryDescribeApplicationsCommand = exports.serializeAws_queryDescribeAccountAttributesCommand = exports.serializeAws_queryDeletePlatformVersionCommand = exports.serializeAws_queryDeleteEnvironmentConfigurationCommand = exports.serializeAws_queryDeleteConfigurationTemplateCommand = exports.serializeAws_queryDeleteApplicationVersionCommand = exports.serializeAws_queryDeleteApplicationCommand = exports.serializeAws_queryCreateStorageLocationCommand = exports.serializeAws_queryCreatePlatformVersionCommand = exports.serializeAws_queryCreateEnvironmentCommand = exports.serializeAws_queryCreateConfigurationTemplateCommand = exports.serializeAws_queryCreateApplicationVersionCommand = exports.serializeAws_queryCreateApplicationCommand = exports.serializeAws_queryComposeEnvironmentsCommand = exports.serializeAws_queryCheckDNSAvailabilityCommand = exports.serializeAws_queryAssociateEnvironmentOperationsRoleCommand = exports.serializeAws_queryApplyEnvironmentManagedActionCommand = exports.serializeAws_queryAbortEnvironmentUpdateCommand = void 0;
exports.deserializeAws_queryValidateConfigurationSettingsCommand = exports.deserializeAws_queryUpdateTagsForResourceCommand = exports.deserializeAws_queryUpdateEnvironmentCommand = exports.deserializeAws_queryUpdateConfigurationTemplateCommand = exports.deserializeAws_queryUpdateApplicationVersionCommand = exports.deserializeAws_queryUpdateApplicationResourceLifecycleCommand = exports.deserializeAws_queryUpdateApplicationCommand = exports.deserializeAws_queryTerminateEnvironmentCommand = exports.deserializeAws_querySwapEnvironmentCNAMEsCommand = exports.deserializeAws_queryRetrieveEnvironmentInfoCommand = exports.deserializeAws_queryRestartAppServerCommand = exports.deserializeAws_queryRequestEnvironmentInfoCommand = exports.deserializeAws_queryRebuildEnvironmentCommand = exports.deserializeAws_queryListTagsForResourceCommand = exports.deserializeAws_queryListPlatformVersionsCommand = exports.deserializeAws_queryListPlatformBranchesCommand = exports.deserializeAws_queryListAvailableSolutionStacksCommand = exports.deserializeAws_queryDisassociateEnvironmentOperationsRoleCommand = exports.deserializeAws_queryDescribePlatformVersionCommand = exports.deserializeAws_queryDescribeInstancesHealthCommand = exports.deserializeAws_queryDescribeEventsCommand = exports.deserializeAws_queryDescribeEnvironmentsCommand = exports.deserializeAws_queryDescribeEnvironmentResourcesCommand = exports.deserializeAws_queryDescribeEnvironmentManagedActionsCommand = exports.deserializeAws_queryDescribeEnvironmentManagedActionHistoryCommand = exports.deserializeAws_queryDescribeEnvironmentHealthCommand = exports.deserializeAws_queryDescribeConfigurationSettingsCommand = exports.deserializeAws_queryDescribeConfigurationOptionsCommand = exports.deserializeAws_queryDescribeApplicationVersionsCommand = exports.deserializeAws_queryDescribeApplicationsCommand = exports.deserializeAws_queryDescribeAccountAttributesCommand = exports.deserializeAws_queryDeletePlatformVersionCommand = exports.deserializeAws_queryDeleteEnvironmentConfigurationCommand = exports.deserializeAws_queryDeleteConfigurationTemplateCommand = exports.deserializeAws_queryDeleteApplicationVersionCommand = exports.deserializeAws_queryDeleteApplicationCommand = exports.deserializeAws_queryCreateStorageLocationCommand = exports.deserializeAws_queryCreatePlatformVersionCommand = exports.deserializeAws_queryCreateEnvironmentCommand = exports.deserializeAws_queryCreateConfigurationTemplateCommand = exports.deserializeAws_queryCreateApplicationVersionCommand = exports.deserializeAws_queryCreateApplicationCommand = exports.deserializeAws_queryComposeEnvironmentsCommand = exports.deserializeAws_queryCheckDNSAvailabilityCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const fast_xml_parser_1 = require("fast-xml-parser");
const ElasticBeanstalkServiceException_1 = require("../models/ElasticBeanstalkServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_queryAbortEnvironmentUpdateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAbortEnvironmentUpdateMessage(input, context),
        Action: "AbortEnvironmentUpdate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAbortEnvironmentUpdateCommand = serializeAws_queryAbortEnvironmentUpdateCommand;
const serializeAws_queryApplyEnvironmentManagedActionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryApplyEnvironmentManagedActionRequest(input, context),
        Action: "ApplyEnvironmentManagedAction",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryApplyEnvironmentManagedActionCommand = serializeAws_queryApplyEnvironmentManagedActionCommand;
const serializeAws_queryAssociateEnvironmentOperationsRoleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryAssociateEnvironmentOperationsRoleMessage(input, context),
        Action: "AssociateEnvironmentOperationsRole",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryAssociateEnvironmentOperationsRoleCommand = serializeAws_queryAssociateEnvironmentOperationsRoleCommand;
const serializeAws_queryCheckDNSAvailabilityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCheckDNSAvailabilityMessage(input, context),
        Action: "CheckDNSAvailability",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCheckDNSAvailabilityCommand = serializeAws_queryCheckDNSAvailabilityCommand;
const serializeAws_queryComposeEnvironmentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryComposeEnvironmentsMessage(input, context),
        Action: "ComposeEnvironments",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryComposeEnvironmentsCommand = serializeAws_queryComposeEnvironmentsCommand;
const serializeAws_queryCreateApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateApplicationMessage(input, context),
        Action: "CreateApplication",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateApplicationCommand = serializeAws_queryCreateApplicationCommand;
const serializeAws_queryCreateApplicationVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateApplicationVersionMessage(input, context),
        Action: "CreateApplicationVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateApplicationVersionCommand = serializeAws_queryCreateApplicationVersionCommand;
const serializeAws_queryCreateConfigurationTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateConfigurationTemplateMessage(input, context),
        Action: "CreateConfigurationTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateConfigurationTemplateCommand = serializeAws_queryCreateConfigurationTemplateCommand;
const serializeAws_queryCreateEnvironmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateEnvironmentMessage(input, context),
        Action: "CreateEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateEnvironmentCommand = serializeAws_queryCreateEnvironmentCommand;
const serializeAws_queryCreatePlatformVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreatePlatformVersionRequest(input, context),
        Action: "CreatePlatformVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreatePlatformVersionCommand = serializeAws_queryCreatePlatformVersionCommand;
const serializeAws_queryCreateStorageLocationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "CreateStorageLocation",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryCreateStorageLocationCommand = serializeAws_queryCreateStorageLocationCommand;
const serializeAws_queryDeleteApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteApplicationMessage(input, context),
        Action: "DeleteApplication",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteApplicationCommand = serializeAws_queryDeleteApplicationCommand;
const serializeAws_queryDeleteApplicationVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteApplicationVersionMessage(input, context),
        Action: "DeleteApplicationVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteApplicationVersionCommand = serializeAws_queryDeleteApplicationVersionCommand;
const serializeAws_queryDeleteConfigurationTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteConfigurationTemplateMessage(input, context),
        Action: "DeleteConfigurationTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteConfigurationTemplateCommand = serializeAws_queryDeleteConfigurationTemplateCommand;
const serializeAws_queryDeleteEnvironmentConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteEnvironmentConfigurationMessage(input, context),
        Action: "DeleteEnvironmentConfiguration",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeleteEnvironmentConfigurationCommand = serializeAws_queryDeleteEnvironmentConfigurationCommand;
const serializeAws_queryDeletePlatformVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeletePlatformVersionRequest(input, context),
        Action: "DeletePlatformVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDeletePlatformVersionCommand = serializeAws_queryDeletePlatformVersionCommand;
const serializeAws_queryDescribeAccountAttributesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "DescribeAccountAttributes",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeAccountAttributesCommand = serializeAws_queryDescribeAccountAttributesCommand;
const serializeAws_queryDescribeApplicationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeApplicationsMessage(input, context),
        Action: "DescribeApplications",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeApplicationsCommand = serializeAws_queryDescribeApplicationsCommand;
const serializeAws_queryDescribeApplicationVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeApplicationVersionsMessage(input, context),
        Action: "DescribeApplicationVersions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeApplicationVersionsCommand = serializeAws_queryDescribeApplicationVersionsCommand;
const serializeAws_queryDescribeConfigurationOptionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeConfigurationOptionsMessage(input, context),
        Action: "DescribeConfigurationOptions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeConfigurationOptionsCommand = serializeAws_queryDescribeConfigurationOptionsCommand;
const serializeAws_queryDescribeConfigurationSettingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeConfigurationSettingsMessage(input, context),
        Action: "DescribeConfigurationSettings",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeConfigurationSettingsCommand = serializeAws_queryDescribeConfigurationSettingsCommand;
const serializeAws_queryDescribeEnvironmentHealthCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEnvironmentHealthRequest(input, context),
        Action: "DescribeEnvironmentHealth",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEnvironmentHealthCommand = serializeAws_queryDescribeEnvironmentHealthCommand;
const serializeAws_queryDescribeEnvironmentManagedActionHistoryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEnvironmentManagedActionHistoryRequest(input, context),
        Action: "DescribeEnvironmentManagedActionHistory",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEnvironmentManagedActionHistoryCommand = serializeAws_queryDescribeEnvironmentManagedActionHistoryCommand;
const serializeAws_queryDescribeEnvironmentManagedActionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEnvironmentManagedActionsRequest(input, context),
        Action: "DescribeEnvironmentManagedActions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEnvironmentManagedActionsCommand = serializeAws_queryDescribeEnvironmentManagedActionsCommand;
const serializeAws_queryDescribeEnvironmentResourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEnvironmentResourcesMessage(input, context),
        Action: "DescribeEnvironmentResources",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEnvironmentResourcesCommand = serializeAws_queryDescribeEnvironmentResourcesCommand;
const serializeAws_queryDescribeEnvironmentsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEnvironmentsMessage(input, context),
        Action: "DescribeEnvironments",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEnvironmentsCommand = serializeAws_queryDescribeEnvironmentsCommand;
const serializeAws_queryDescribeEventsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeEventsMessage(input, context),
        Action: "DescribeEvents",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeEventsCommand = serializeAws_queryDescribeEventsCommand;
const serializeAws_queryDescribeInstancesHealthCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeInstancesHealthRequest(input, context),
        Action: "DescribeInstancesHealth",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribeInstancesHealthCommand = serializeAws_queryDescribeInstancesHealthCommand;
const serializeAws_queryDescribePlatformVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribePlatformVersionRequest(input, context),
        Action: "DescribePlatformVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDescribePlatformVersionCommand = serializeAws_queryDescribePlatformVersionCommand;
const serializeAws_queryDisassociateEnvironmentOperationsRoleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDisassociateEnvironmentOperationsRoleMessage(input, context),
        Action: "DisassociateEnvironmentOperationsRole",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryDisassociateEnvironmentOperationsRoleCommand = serializeAws_queryDisassociateEnvironmentOperationsRoleCommand;
const serializeAws_queryListAvailableSolutionStacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    const body = buildFormUrlencodedString({
        Action: "ListAvailableSolutionStacks",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryListAvailableSolutionStacksCommand = serializeAws_queryListAvailableSolutionStacksCommand;
const serializeAws_queryListPlatformBranchesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListPlatformBranchesRequest(input, context),
        Action: "ListPlatformBranches",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryListPlatformBranchesCommand = serializeAws_queryListPlatformBranchesCommand;
const serializeAws_queryListPlatformVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListPlatformVersionsRequest(input, context),
        Action: "ListPlatformVersions",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryListPlatformVersionsCommand = serializeAws_queryListPlatformVersionsCommand;
const serializeAws_queryListTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListTagsForResourceMessage(input, context),
        Action: "ListTagsForResource",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryListTagsForResourceCommand = serializeAws_queryListTagsForResourceCommand;
const serializeAws_queryRebuildEnvironmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRebuildEnvironmentMessage(input, context),
        Action: "RebuildEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRebuildEnvironmentCommand = serializeAws_queryRebuildEnvironmentCommand;
const serializeAws_queryRequestEnvironmentInfoCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRequestEnvironmentInfoMessage(input, context),
        Action: "RequestEnvironmentInfo",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRequestEnvironmentInfoCommand = serializeAws_queryRequestEnvironmentInfoCommand;
const serializeAws_queryRestartAppServerCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRestartAppServerMessage(input, context),
        Action: "RestartAppServer",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRestartAppServerCommand = serializeAws_queryRestartAppServerCommand;
const serializeAws_queryRetrieveEnvironmentInfoCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRetrieveEnvironmentInfoMessage(input, context),
        Action: "RetrieveEnvironmentInfo",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryRetrieveEnvironmentInfoCommand = serializeAws_queryRetrieveEnvironmentInfoCommand;
const serializeAws_querySwapEnvironmentCNAMEsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySwapEnvironmentCNAMEsMessage(input, context),
        Action: "SwapEnvironmentCNAMEs",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_querySwapEnvironmentCNAMEsCommand = serializeAws_querySwapEnvironmentCNAMEsCommand;
const serializeAws_queryTerminateEnvironmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryTerminateEnvironmentMessage(input, context),
        Action: "TerminateEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryTerminateEnvironmentCommand = serializeAws_queryTerminateEnvironmentCommand;
const serializeAws_queryUpdateApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateApplicationMessage(input, context),
        Action: "UpdateApplication",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdateApplicationCommand = serializeAws_queryUpdateApplicationCommand;
const serializeAws_queryUpdateApplicationResourceLifecycleCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateApplicationResourceLifecycleMessage(input, context),
        Action: "UpdateApplicationResourceLifecycle",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdateApplicationResourceLifecycleCommand = serializeAws_queryUpdateApplicationResourceLifecycleCommand;
const serializeAws_queryUpdateApplicationVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateApplicationVersionMessage(input, context),
        Action: "UpdateApplicationVersion",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdateApplicationVersionCommand = serializeAws_queryUpdateApplicationVersionCommand;
const serializeAws_queryUpdateConfigurationTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateConfigurationTemplateMessage(input, context),
        Action: "UpdateConfigurationTemplate",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdateConfigurationTemplateCommand = serializeAws_queryUpdateConfigurationTemplateCommand;
const serializeAws_queryUpdateEnvironmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateEnvironmentMessage(input, context),
        Action: "UpdateEnvironment",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdateEnvironmentCommand = serializeAws_queryUpdateEnvironmentCommand;
const serializeAws_queryUpdateTagsForResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateTagsForResourceMessage(input, context),
        Action: "UpdateTagsForResource",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryUpdateTagsForResourceCommand = serializeAws_queryUpdateTagsForResourceCommand;
const serializeAws_queryValidateConfigurationSettingsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryValidateConfigurationSettingsMessage(input, context),
        Action: "ValidateConfigurationSettings",
        Version: "2010-12-01",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.serializeAws_queryValidateConfigurationSettingsCommand = serializeAws_queryValidateConfigurationSettingsCommand;
const deserializeAws_queryAbortEnvironmentUpdateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAbortEnvironmentUpdateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAbortEnvironmentUpdateCommand = deserializeAws_queryAbortEnvironmentUpdateCommand;
const deserializeAws_queryAbortEnvironmentUpdateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryApplyEnvironmentManagedActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryApplyEnvironmentManagedActionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplyEnvironmentManagedActionResult(data.ApplyEnvironmentManagedActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryApplyEnvironmentManagedActionCommand = deserializeAws_queryApplyEnvironmentManagedActionCommand;
const deserializeAws_queryApplyEnvironmentManagedActionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        case "ManagedActionInvalidStateException":
        case "com.amazonaws.elasticbeanstalk#ManagedActionInvalidStateException":
            throw await deserializeAws_queryManagedActionInvalidStateExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryAssociateEnvironmentOperationsRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryAssociateEnvironmentOperationsRoleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryAssociateEnvironmentOperationsRoleCommand = deserializeAws_queryAssociateEnvironmentOperationsRoleCommand;
const deserializeAws_queryAssociateEnvironmentOperationsRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCheckDNSAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCheckDNSAvailabilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCheckDNSAvailabilityResultMessage(data.CheckDNSAvailabilityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCheckDNSAvailabilityCommand = deserializeAws_queryCheckDNSAvailabilityCommand;
const deserializeAws_queryCheckDNSAvailabilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryComposeEnvironmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryComposeEnvironmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnvironmentDescriptionsMessage(data.ComposeEnvironmentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryComposeEnvironmentsCommand = deserializeAws_queryComposeEnvironmentsCommand;
const deserializeAws_queryComposeEnvironmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "TooManyEnvironmentsException":
        case "com.amazonaws.elasticbeanstalk#TooManyEnvironmentsException":
            throw await deserializeAws_queryTooManyEnvironmentsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateApplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplicationDescriptionMessage(data.CreateApplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateApplicationCommand = deserializeAws_queryCreateApplicationCommand;
const deserializeAws_queryCreateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TooManyApplicationsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationsException":
            throw await deserializeAws_queryTooManyApplicationsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateApplicationVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplicationVersionDescriptionMessage(data.CreateApplicationVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateApplicationVersionCommand = deserializeAws_queryCreateApplicationVersionCommand;
const deserializeAws_queryCreateApplicationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CodeBuildNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#CodeBuildNotInServiceRegionException":
            throw await deserializeAws_queryCodeBuildNotInServiceRegionExceptionResponse(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "S3LocationNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#S3LocationNotInServiceRegionException":
            throw await deserializeAws_queryS3LocationNotInServiceRegionExceptionResponse(parsedOutput, context);
        case "TooManyApplicationVersionsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationVersionsException":
            throw await deserializeAws_queryTooManyApplicationVersionsExceptionResponse(parsedOutput, context);
        case "TooManyApplicationsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationsException":
            throw await deserializeAws_queryTooManyApplicationsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateConfigurationTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryConfigurationSettingsDescription(data.CreateConfigurationTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateConfigurationTemplateCommand = deserializeAws_queryCreateConfigurationTemplateCommand;
const deserializeAws_queryCreateConfigurationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await deserializeAws_queryTooManyBucketsExceptionResponse(parsedOutput, context);
        case "TooManyConfigurationTemplatesException":
        case "com.amazonaws.elasticbeanstalk#TooManyConfigurationTemplatesException":
            throw await deserializeAws_queryTooManyConfigurationTemplatesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateEnvironmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnvironmentDescription(data.CreateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateEnvironmentCommand = deserializeAws_queryCreateEnvironmentCommand;
const deserializeAws_queryCreateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "TooManyEnvironmentsException":
        case "com.amazonaws.elasticbeanstalk#TooManyEnvironmentsException":
            throw await deserializeAws_queryTooManyEnvironmentsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreatePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreatePlatformVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreatePlatformVersionResult(data.CreatePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreatePlatformVersionCommand = deserializeAws_queryCreatePlatformVersionCommand;
const deserializeAws_queryCreatePlatformVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "TooManyPlatformsException":
        case "com.amazonaws.elasticbeanstalk#TooManyPlatformsException":
            throw await deserializeAws_queryTooManyPlatformsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCreateStorageLocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateStorageLocationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateStorageLocationResultMessage(data.CreateStorageLocationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryCreateStorageLocationCommand = deserializeAws_queryCreateStorageLocationCommand;
const deserializeAws_queryCreateStorageLocationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "S3SubscriptionRequiredException":
        case "com.amazonaws.elasticbeanstalk#S3SubscriptionRequiredException":
            throw await deserializeAws_queryS3SubscriptionRequiredExceptionResponse(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await deserializeAws_queryTooManyBucketsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteApplicationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteApplicationCommand = deserializeAws_queryDeleteApplicationCommand;
const deserializeAws_queryDeleteApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteApplicationVersionCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteApplicationVersionCommand = deserializeAws_queryDeleteApplicationVersionCommand;
const deserializeAws_queryDeleteApplicationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "S3LocationNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#S3LocationNotInServiceRegionException":
            throw await deserializeAws_queryS3LocationNotInServiceRegionExceptionResponse(parsedOutput, context);
        case "SourceBundleDeletionFailure":
        case "com.amazonaws.elasticbeanstalk#SourceBundleDeletionException":
            throw await deserializeAws_querySourceBundleDeletionExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteConfigurationTemplateCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteConfigurationTemplateCommand = deserializeAws_queryDeleteConfigurationTemplateCommand;
const deserializeAws_queryDeleteConfigurationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDeleteEnvironmentConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteEnvironmentConfigurationCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeleteEnvironmentConfigurationCommand = deserializeAws_queryDeleteEnvironmentConfigurationCommand;
const deserializeAws_queryDeleteEnvironmentConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryDeletePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeletePlatformVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeletePlatformVersionResult(data.DeletePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDeletePlatformVersionCommand = deserializeAws_queryDeletePlatformVersionCommand;
const deserializeAws_queryDeletePlatformVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "PlatformVersionStillReferencedException":
        case "com.amazonaws.elasticbeanstalk#PlatformVersionStillReferencedException":
            throw await deserializeAws_queryPlatformVersionStillReferencedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAccountAttributesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeAccountAttributesResult(data.DescribeAccountAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeAccountAttributesCommand = deserializeAws_queryDescribeAccountAttributesCommand;
const deserializeAws_queryDescribeAccountAttributesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeApplicationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplicationDescriptionsMessage(data.DescribeApplicationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeApplicationsCommand = deserializeAws_queryDescribeApplicationsCommand;
const deserializeAws_queryDescribeApplicationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeApplicationVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeApplicationVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplicationVersionDescriptionsMessage(data.DescribeApplicationVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeApplicationVersionsCommand = deserializeAws_queryDescribeApplicationVersionsCommand;
const deserializeAws_queryDescribeApplicationVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeConfigurationOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeConfigurationOptionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryConfigurationOptionsDescription(data.DescribeConfigurationOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeConfigurationOptionsCommand = deserializeAws_queryDescribeConfigurationOptionsCommand;
const deserializeAws_queryDescribeConfigurationOptionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await deserializeAws_queryTooManyBucketsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeConfigurationSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeConfigurationSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryConfigurationSettingsDescriptions(data.DescribeConfigurationSettingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeConfigurationSettingsCommand = deserializeAws_queryDescribeConfigurationSettingsCommand;
const deserializeAws_queryDescribeConfigurationSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await deserializeAws_queryTooManyBucketsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeEnvironmentHealthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEnvironmentHealthCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeEnvironmentHealthResult(data.DescribeEnvironmentHealthResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEnvironmentHealthCommand = deserializeAws_queryDescribeEnvironmentHealthCommand;
const deserializeAws_queryDescribeEnvironmentHealthCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.elasticbeanstalk#InvalidRequestException":
            throw await deserializeAws_queryInvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeEnvironmentManagedActionHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEnvironmentManagedActionHistoryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeEnvironmentManagedActionHistoryResult(data.DescribeEnvironmentManagedActionHistoryResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEnvironmentManagedActionHistoryCommand = deserializeAws_queryDescribeEnvironmentManagedActionHistoryCommand;
const deserializeAws_queryDescribeEnvironmentManagedActionHistoryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeEnvironmentManagedActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEnvironmentManagedActionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeEnvironmentManagedActionsResult(data.DescribeEnvironmentManagedActionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEnvironmentManagedActionsCommand = deserializeAws_queryDescribeEnvironmentManagedActionsCommand;
const deserializeAws_queryDescribeEnvironmentManagedActionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeEnvironmentResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEnvironmentResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnvironmentResourceDescriptionsMessage(data.DescribeEnvironmentResourcesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEnvironmentResourcesCommand = deserializeAws_queryDescribeEnvironmentResourcesCommand;
const deserializeAws_queryDescribeEnvironmentResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribeEnvironmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEnvironmentsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnvironmentDescriptionsMessage(data.DescribeEnvironmentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEnvironmentsCommand = deserializeAws_queryDescribeEnvironmentsCommand;
const deserializeAws_queryDescribeEnvironmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEventDescriptionsMessage(data.DescribeEventsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeEventsCommand = deserializeAws_queryDescribeEventsCommand;
const deserializeAws_queryDescribeEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryDescribeInstancesHealthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeInstancesHealthCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeInstancesHealthResult(data.DescribeInstancesHealthResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribeInstancesHealthCommand = deserializeAws_queryDescribeInstancesHealthCommand;
const deserializeAws_queryDescribeInstancesHealthCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.elasticbeanstalk#InvalidRequestException":
            throw await deserializeAws_queryInvalidRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDescribePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribePlatformVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribePlatformVersionResult(data.DescribePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDescribePlatformVersionCommand = deserializeAws_queryDescribePlatformVersionCommand;
const deserializeAws_queryDescribePlatformVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryDisassociateEnvironmentOperationsRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDisassociateEnvironmentOperationsRoleCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryDisassociateEnvironmentOperationsRoleCommand = deserializeAws_queryDisassociateEnvironmentOperationsRoleCommand;
const deserializeAws_queryDisassociateEnvironmentOperationsRoleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryListAvailableSolutionStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListAvailableSolutionStacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListAvailableSolutionStacksResultMessage(data.ListAvailableSolutionStacksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryListAvailableSolutionStacksCommand = deserializeAws_queryListAvailableSolutionStacksCommand;
const deserializeAws_queryListAvailableSolutionStacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryListPlatformBranchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListPlatformBranchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListPlatformBranchesResult(data.ListPlatformBranchesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryListPlatformBranchesCommand = deserializeAws_queryListPlatformBranchesCommand;
const deserializeAws_queryListPlatformBranchesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryListPlatformVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListPlatformVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListPlatformVersionsResult(data.ListPlatformVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryListPlatformVersionsCommand = deserializeAws_queryListPlatformVersionsCommand;
const deserializeAws_queryListPlatformVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await deserializeAws_queryElasticBeanstalkServiceExceptionResponse(parsedOutput, context);
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListTagsForResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryResourceTagsDescriptionMessage(data.ListTagsForResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryListTagsForResourceCommand = deserializeAws_queryListTagsForResourceCommand;
const deserializeAws_queryListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.elasticbeanstalk#ResourceNotFoundException":
            throw await deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceTypeNotSupportedException":
        case "com.amazonaws.elasticbeanstalk#ResourceTypeNotSupportedException":
            throw await deserializeAws_queryResourceTypeNotSupportedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRebuildEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRebuildEnvironmentCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRebuildEnvironmentCommand = deserializeAws_queryRebuildEnvironmentCommand;
const deserializeAws_queryRebuildEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryRequestEnvironmentInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRequestEnvironmentInfoCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRequestEnvironmentInfoCommand = deserializeAws_queryRequestEnvironmentInfoCommand;
const deserializeAws_queryRequestEnvironmentInfoCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryRestartAppServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRestartAppServerCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRestartAppServerCommand = deserializeAws_queryRestartAppServerCommand;
const deserializeAws_queryRestartAppServerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryRetrieveEnvironmentInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRetrieveEnvironmentInfoCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRetrieveEnvironmentInfoResultMessage(data.RetrieveEnvironmentInfoResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryRetrieveEnvironmentInfoCommand = deserializeAws_queryRetrieveEnvironmentInfoCommand;
const deserializeAws_queryRetrieveEnvironmentInfoCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_querySwapEnvironmentCNAMEsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySwapEnvironmentCNAMEsCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_querySwapEnvironmentCNAMEsCommand = deserializeAws_querySwapEnvironmentCNAMEsCommand;
const deserializeAws_querySwapEnvironmentCNAMEsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryTerminateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryTerminateEnvironmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnvironmentDescription(data.TerminateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryTerminateEnvironmentCommand = deserializeAws_queryTerminateEnvironmentCommand;
const deserializeAws_queryTerminateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryUpdateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateApplicationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplicationDescriptionMessage(data.UpdateApplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdateApplicationCommand = deserializeAws_queryUpdateApplicationCommand;
const deserializeAws_queryUpdateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryUpdateApplicationResourceLifecycleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateApplicationResourceLifecycleCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplicationResourceLifecycleDescriptionMessage(data.UpdateApplicationResourceLifecycleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdateApplicationResourceLifecycleCommand = deserializeAws_queryUpdateApplicationResourceLifecycleCommand;
const deserializeAws_queryUpdateApplicationResourceLifecycleCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryUpdateApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateApplicationVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryApplicationVersionDescriptionMessage(data.UpdateApplicationVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdateApplicationVersionCommand = deserializeAws_queryUpdateApplicationVersionCommand;
const deserializeAws_queryUpdateApplicationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
        errorCode,
    });
};
const deserializeAws_queryUpdateConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateConfigurationTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryConfigurationSettingsDescription(data.UpdateConfigurationTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdateConfigurationTemplateCommand = deserializeAws_queryUpdateConfigurationTemplateCommand;
const deserializeAws_queryUpdateConfigurationTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await deserializeAws_queryTooManyBucketsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryUpdateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateEnvironmentCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEnvironmentDescription(data.UpdateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdateEnvironmentCommand = deserializeAws_queryUpdateEnvironmentCommand;
const deserializeAws_queryUpdateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await deserializeAws_queryTooManyBucketsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryUpdateTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateTagsForResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryUpdateTagsForResourceCommand = deserializeAws_queryUpdateTagsForResourceCommand;
const deserializeAws_queryUpdateTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.elasticbeanstalk#ResourceNotFoundException":
            throw await deserializeAws_queryResourceNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceTypeNotSupportedException":
        case "com.amazonaws.elasticbeanstalk#ResourceTypeNotSupportedException":
            throw await deserializeAws_queryResourceTypeNotSupportedExceptionResponse(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.elasticbeanstalk#TooManyTagsException":
            throw await deserializeAws_queryTooManyTagsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryValidateConfigurationSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryValidateConfigurationSettingsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryConfigurationSettingsValidationMessages(data.ValidateConfigurationSettingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
exports.deserializeAws_queryValidateConfigurationSettingsCommand = deserializeAws_queryValidateConfigurationSettingsCommand;
const deserializeAws_queryValidateConfigurationSettingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await deserializeAws_queryInsufficientPrivilegesExceptionResponse(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await deserializeAws_queryTooManyBucketsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: ElasticBeanstalkServiceException_1.ElasticBeanstalkServiceException,
                errorCode,
            });
    }
};
const deserializeAws_queryCodeBuildNotInServiceRegionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCodeBuildNotInServiceRegionException(body.Error, context);
    const exception = new models_0_1.CodeBuildNotInServiceRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryElasticBeanstalkServiceExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryElasticBeanstalkServiceException(body.Error, context);
    const exception = new models_0_1.ElasticBeanstalkServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInsufficientPrivilegesExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientPrivilegesException(body.Error, context);
    const exception = new models_0_1.InsufficientPrivilegesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryInvalidRequestExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidRequestException(body.Error, context);
    const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryManagedActionInvalidStateExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryManagedActionInvalidStateException(body.Error, context);
    const exception = new models_0_1.ManagedActionInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryOperationInProgressExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOperationInProgressException(body.Error, context);
    const exception = new models_0_1.OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryPlatformVersionStillReferencedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryPlatformVersionStillReferencedException(body.Error, context);
    const exception = new models_0_1.PlatformVersionStillReferencedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryResourceNotFoundException(body.Error, context);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryResourceTypeNotSupportedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryResourceTypeNotSupportedException(body.Error, context);
    const exception = new models_0_1.ResourceTypeNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryS3LocationNotInServiceRegionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryS3LocationNotInServiceRegionException(body.Error, context);
    const exception = new models_0_1.S3LocationNotInServiceRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryS3SubscriptionRequiredExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryS3SubscriptionRequiredException(body.Error, context);
    const exception = new models_0_1.S3SubscriptionRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_querySourceBundleDeletionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_querySourceBundleDeletionException(body.Error, context);
    const exception = new models_0_1.SourceBundleDeletionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTooManyApplicationsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTooManyApplicationsException(body.Error, context);
    const exception = new models_0_1.TooManyApplicationsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTooManyApplicationVersionsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTooManyApplicationVersionsException(body.Error, context);
    const exception = new models_0_1.TooManyApplicationVersionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTooManyBucketsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTooManyBucketsException(body.Error, context);
    const exception = new models_0_1.TooManyBucketsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTooManyConfigurationTemplatesExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTooManyConfigurationTemplatesException(body.Error, context);
    const exception = new models_0_1.TooManyConfigurationTemplatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTooManyEnvironmentsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTooManyEnvironmentsException(body.Error, context);
    const exception = new models_0_1.TooManyEnvironmentsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTooManyPlatformsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTooManyPlatformsException(body.Error, context);
    const exception = new models_0_1.TooManyPlatformsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const deserializeAws_queryTooManyTagsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTooManyTagsException(body.Error, context);
    const exception = new models_0_1.TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const serializeAws_queryAbortEnvironmentUpdateMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const serializeAws_queryApplicationNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryApplicationResourceLifecycleConfig = (input, context) => {
    const entries = {};
    if (input.ServiceRole != null) {
        entries["ServiceRole"] = input.ServiceRole;
    }
    if (input.VersionLifecycleConfig != null) {
        const memberEntries = serializeAws_queryApplicationVersionLifecycleConfig(input.VersionLifecycleConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryApplicationVersionLifecycleConfig = (input, context) => {
    const entries = {};
    if (input.MaxCountRule != null) {
        const memberEntries = serializeAws_queryMaxCountRule(input.MaxCountRule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaxCountRule.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxAgeRule != null) {
        const memberEntries = serializeAws_queryMaxAgeRule(input.MaxAgeRule, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaxAgeRule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryApplyEnvironmentManagedActionRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.ActionId != null) {
        entries["ActionId"] = input.ActionId;
    }
    return entries;
};
const serializeAws_queryAssociateEnvironmentOperationsRoleMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.OperationsRole != null) {
        entries["OperationsRole"] = input.OperationsRole;
    }
    return entries;
};
const serializeAws_queryBuildConfiguration = (input, context) => {
    const entries = {};
    if (input.ArtifactName != null) {
        entries["ArtifactName"] = input.ArtifactName;
    }
    if (input.CodeBuildServiceRole != null) {
        entries["CodeBuildServiceRole"] = input.CodeBuildServiceRole;
    }
    if (input.ComputeType != null) {
        entries["ComputeType"] = input.ComputeType;
    }
    if (input.Image != null) {
        entries["Image"] = input.Image;
    }
    if (input.TimeoutInMinutes != null) {
        entries["TimeoutInMinutes"] = input.TimeoutInMinutes;
    }
    return entries;
};
const serializeAws_queryCheckDNSAvailabilityMessage = (input, context) => {
    const entries = {};
    if (input.CNAMEPrefix != null) {
        entries["CNAMEPrefix"] = input.CNAMEPrefix;
    }
    return entries;
};
const serializeAws_queryComposeEnvironmentsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.VersionLabels != null) {
        const memberEntries = serializeAws_queryVersionLabels(input.VersionLabels, context);
        if (input.VersionLabels?.length === 0) {
            entries.VersionLabels = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLabels.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryConfigurationOptionSetting = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Namespace != null) {
        entries["Namespace"] = input.Namespace;
    }
    if (input.OptionName != null) {
        entries["OptionName"] = input.OptionName;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryConfigurationOptionSettingsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryConfigurationOptionSetting(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryCreateApplicationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ResourceLifecycleConfig != null) {
        const memberEntries = serializeAws_queryApplicationResourceLifecycleConfig(input.ResourceLifecycleConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.SourceBuildInformation != null) {
        const memberEntries = serializeAws_querySourceBuildInformation(input.SourceBuildInformation, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceBuildInformation.${key}`;
            entries[loc] = value;
        });
    }
    if (input.SourceBundle != null) {
        const memberEntries = serializeAws_queryS3Location(input.SourceBundle, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceBundle.${key}`;
            entries[loc] = value;
        });
    }
    if (input.BuildConfiguration != null) {
        const memberEntries = serializeAws_queryBuildConfiguration(input.BuildConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BuildConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AutoCreateApplication != null) {
        entries["AutoCreateApplication"] = input.AutoCreateApplication;
    }
    if (input.Process != null) {
        entries["Process"] = input.Process;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.SourceConfiguration != null) {
        const memberEntries = serializeAws_querySourceConfiguration(input.SourceConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.OptionSettings != null) {
        const memberEntries = serializeAws_queryConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCreateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.CNAMEPrefix != null) {
        entries["CNAMEPrefix"] = input.CNAMEPrefix;
    }
    if (input.Tier != null) {
        const memberEntries = serializeAws_queryEnvironmentTier(input.Tier, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tier.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.OptionSettings != null) {
        const memberEntries = serializeAws_queryConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = serializeAws_queryOptionsSpecifierList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationsRole != null) {
        entries["OperationsRole"] = input.OperationsRole;
    }
    return entries;
};
const serializeAws_queryCreatePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input.PlatformName != null) {
        entries["PlatformName"] = input.PlatformName;
    }
    if (input.PlatformVersion != null) {
        entries["PlatformVersion"] = input.PlatformVersion;
    }
    if (input.PlatformDefinitionBundle != null) {
        const memberEntries = serializeAws_queryS3Location(input.PlatformDefinitionBundle, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PlatformDefinitionBundle.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.OptionSettings != null) {
        const memberEntries = serializeAws_queryConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDeleteApplicationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TerminateEnvByForce != null) {
        entries["TerminateEnvByForce"] = input.TerminateEnvByForce;
    }
    return entries;
};
const serializeAws_queryDeleteApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.DeleteSourceBundle != null) {
        entries["DeleteSourceBundle"] = input.DeleteSourceBundle;
    }
    return entries;
};
const serializeAws_queryDeleteConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const serializeAws_queryDeleteEnvironmentConfigurationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const serializeAws_queryDeletePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    return entries;
};
const serializeAws_queryDescribeApplicationsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationNames != null) {
        const memberEntries = serializeAws_queryApplicationNamesList(input.ApplicationNames, context);
        if (input.ApplicationNames?.length === 0) {
            entries.ApplicationNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ApplicationNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeApplicationVersionsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabels != null) {
        const memberEntries = serializeAws_queryVersionLabelsList(input.VersionLabels, context);
        if (input.VersionLabels?.length === 0) {
            entries.VersionLabels = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLabels.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeConfigurationOptionsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.Options != null) {
        const memberEntries = serializeAws_queryOptionsSpecifierList(input.Options, context);
        if (input.Options?.length === 0) {
            entries.Options = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeConfigurationSettingsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const serializeAws_queryDescribeEnvironmentHealthRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.AttributeNames != null) {
        const memberEntries = serializeAws_queryEnvironmentHealthAttributes(input.AttributeNames, context);
        if (input.AttributeNames?.length === 0) {
            entries.AttributeNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDescribeEnvironmentManagedActionHistoryRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxItems != null) {
        entries["MaxItems"] = input.MaxItems;
    }
    return entries;
};
const serializeAws_queryDescribeEnvironmentManagedActionsRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
const serializeAws_queryDescribeEnvironmentResourcesMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const serializeAws_queryDescribeEnvironmentsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.EnvironmentIds != null) {
        const memberEntries = serializeAws_queryEnvironmentIdList(input.EnvironmentIds, context);
        if (input.EnvironmentIds?.length === 0) {
            entries.EnvironmentIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnvironmentIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.EnvironmentNames != null) {
        const memberEntries = serializeAws_queryEnvironmentNamesList(input.EnvironmentNames, context);
        if (input.EnvironmentNames?.length === 0) {
            entries.EnvironmentNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnvironmentNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.IncludeDeleted != null) {
        entries["IncludeDeleted"] = input.IncludeDeleted;
    }
    if (input.IncludedDeletedBackTo != null) {
        entries["IncludedDeletedBackTo"] = input.IncludedDeletedBackTo.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeEventsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.RequestId != null) {
        entries["RequestId"] = input.RequestId;
    }
    if (input.Severity != null) {
        entries["Severity"] = input.Severity;
    }
    if (input.StartTime != null) {
        entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
    }
    if (input.EndTime != null) {
        entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeInstancesHealthRequest = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.AttributeNames != null) {
        const memberEntries = serializeAws_queryInstancesHealthAttributes(input.AttributeNames, context);
        if (input.AttributeNames?.length === 0) {
            entries.AttributeNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    return entries;
};
const serializeAws_queryDisassociateEnvironmentOperationsRoleMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const serializeAws_queryEnvironmentHealthAttributes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryEnvironmentIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryEnvironmentNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryEnvironmentTier = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Version != null) {
        entries["Version"] = input.Version;
    }
    return entries;
};
const serializeAws_queryInstancesHealthAttributes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryListPlatformBranchesRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = serializeAws_querySearchFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListPlatformVersionsRequest = (input, context) => {
    const entries = {};
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryPlatformFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxRecords != null) {
        entries["MaxRecords"] = input.MaxRecords;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    return entries;
};
const serializeAws_queryMaxAgeRule = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.MaxAgeInDays != null) {
        entries["MaxAgeInDays"] = input.MaxAgeInDays;
    }
    if (input.DeleteSourceFromS3 != null) {
        entries["DeleteSourceFromS3"] = input.DeleteSourceFromS3;
    }
    return entries;
};
const serializeAws_queryMaxCountRule = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.MaxCount != null) {
        entries["MaxCount"] = input.MaxCount;
    }
    if (input.DeleteSourceFromS3 != null) {
        entries["DeleteSourceFromS3"] = input.DeleteSourceFromS3;
    }
    return entries;
};
const serializeAws_queryOptionSpecification = (input, context) => {
    const entries = {};
    if (input.ResourceName != null) {
        entries["ResourceName"] = input.ResourceName;
    }
    if (input.Namespace != null) {
        entries["Namespace"] = input.Namespace;
    }
    if (input.OptionName != null) {
        entries["OptionName"] = input.OptionName;
    }
    return entries;
};
const serializeAws_queryOptionsSpecifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryOptionSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPlatformFilter = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Operator != null) {
        entries["Operator"] = input.Operator;
    }
    if (input.Values != null) {
        const memberEntries = serializeAws_queryPlatformFilterValueList(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryPlatformFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryPlatformFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPlatformFilterValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryRebuildEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const serializeAws_queryRequestEnvironmentInfoMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.InfoType != null) {
        entries["InfoType"] = input.InfoType;
    }
    return entries;
};
const serializeAws_queryRestartAppServerMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    return entries;
};
const serializeAws_queryRetrieveEnvironmentInfoMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.InfoType != null) {
        entries["InfoType"] = input.InfoType;
    }
    return entries;
};
const serializeAws_queryS3Location = (input, context) => {
    const entries = {};
    if (input.S3Bucket != null) {
        entries["S3Bucket"] = input.S3Bucket;
    }
    if (input.S3Key != null) {
        entries["S3Key"] = input.S3Key;
    }
    return entries;
};
const serializeAws_querySearchFilter = (input, context) => {
    const entries = {};
    if (input.Attribute != null) {
        entries["Attribute"] = input.Attribute;
    }
    if (input.Operator != null) {
        entries["Operator"] = input.Operator;
    }
    if (input.Values != null) {
        const memberEntries = serializeAws_querySearchFilterValues(input.Values, context);
        if (input.Values?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_querySearchFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_querySearchFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_querySearchFilterValues = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_querySourceBuildInformation = (input, context) => {
    const entries = {};
    if (input.SourceType != null) {
        entries["SourceType"] = input.SourceType;
    }
    if (input.SourceRepository != null) {
        entries["SourceRepository"] = input.SourceRepository;
    }
    if (input.SourceLocation != null) {
        entries["SourceLocation"] = input.SourceLocation;
    }
    return entries;
};
const serializeAws_querySourceConfiguration = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    return entries;
};
const serializeAws_querySwapEnvironmentCNAMEsMessage = (input, context) => {
    const entries = {};
    if (input.SourceEnvironmentId != null) {
        entries["SourceEnvironmentId"] = input.SourceEnvironmentId;
    }
    if (input.SourceEnvironmentName != null) {
        entries["SourceEnvironmentName"] = input.SourceEnvironmentName;
    }
    if (input.DestinationEnvironmentId != null) {
        entries["DestinationEnvironmentId"] = input.DestinationEnvironmentId;
    }
    if (input.DestinationEnvironmentName != null) {
        entries["DestinationEnvironmentName"] = input.DestinationEnvironmentName;
    }
    return entries;
};
const serializeAws_queryTag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryTagKeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryTags = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryTerminateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.TerminateResources != null) {
        entries["TerminateResources"] = input.TerminateResources;
    }
    if (input.ForceTerminate != null) {
        entries["ForceTerminate"] = input.ForceTerminate;
    }
    return entries;
};
const serializeAws_queryUpdateApplicationMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_queryUpdateApplicationResourceLifecycleMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.ResourceLifecycleConfig != null) {
        const memberEntries = serializeAws_queryApplicationResourceLifecycleConfig(input.ResourceLifecycleConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryUpdateApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    return entries;
};
const serializeAws_queryUpdateConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.OptionSettings != null) {
        const memberEntries = serializeAws_queryConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = serializeAws_queryOptionsSpecifierList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryUpdateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.EnvironmentId != null) {
        entries["EnvironmentId"] = input.EnvironmentId;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.GroupName != null) {
        entries["GroupName"] = input.GroupName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.Tier != null) {
        const memberEntries = serializeAws_queryEnvironmentTier(input.Tier, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tier.${key}`;
            entries[loc] = value;
        });
    }
    if (input.VersionLabel != null) {
        entries["VersionLabel"] = input.VersionLabel;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.SolutionStackName != null) {
        entries["SolutionStackName"] = input.SolutionStackName;
    }
    if (input.PlatformArn != null) {
        entries["PlatformArn"] = input.PlatformArn;
    }
    if (input.OptionSettings != null) {
        const memberEntries = serializeAws_queryConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OptionsToRemove != null) {
        const memberEntries = serializeAws_queryOptionsSpecifierList(input.OptionsToRemove, context);
        if (input.OptionsToRemove?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryUpdateTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input.ResourceArn != null) {
        entries["ResourceArn"] = input.ResourceArn;
    }
    if (input.TagsToAdd != null) {
        const memberEntries = serializeAws_queryTagList(input.TagsToAdd, context);
        if (input.TagsToAdd?.length === 0) {
            entries.TagsToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagsToAdd.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TagsToRemove != null) {
        const memberEntries = serializeAws_queryTagKeyList(input.TagsToRemove, context);
        if (input.TagsToRemove?.length === 0) {
            entries.TagsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryValidateConfigurationSettingsMessage = (input, context) => {
    const entries = {};
    if (input.ApplicationName != null) {
        entries["ApplicationName"] = input.ApplicationName;
    }
    if (input.TemplateName != null) {
        entries["TemplateName"] = input.TemplateName;
    }
    if (input.EnvironmentName != null) {
        entries["EnvironmentName"] = input.EnvironmentName;
    }
    if (input.OptionSettings != null) {
        const memberEntries = serializeAws_queryConfigurationOptionSettingsList(input.OptionSettings, context);
        if (input.OptionSettings?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryVersionLabels = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryVersionLabelsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const deserializeAws_queryApplicationDescription = (output, context) => {
    const contents = {
        ApplicationArn: undefined,
        ApplicationName: undefined,
        Description: undefined,
        DateCreated: undefined,
        DateUpdated: undefined,
        Versions: undefined,
        ConfigurationTemplates: undefined,
        ResourceLifecycleConfig: undefined,
    };
    if (output["ApplicationArn"] !== undefined) {
        contents.ApplicationArn = (0, smithy_client_1.expectString)(output["ApplicationArn"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = (0, smithy_client_1.expectString)(output["ApplicationName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateUpdated"]));
    }
    if (output.Versions === "") {
        contents.Versions = [];
    }
    else if (output["Versions"] !== undefined && output["Versions"]["member"] !== undefined) {
        contents.Versions = deserializeAws_queryVersionLabelsList((0, smithy_client_1.getArrayIfSingleItem)(output["Versions"]["member"]), context);
    }
    if (output.ConfigurationTemplates === "") {
        contents.ConfigurationTemplates = [];
    }
    else if (output["ConfigurationTemplates"] !== undefined &&
        output["ConfigurationTemplates"]["member"] !== undefined) {
        contents.ConfigurationTemplates = deserializeAws_queryConfigurationTemplateNamesList((0, smithy_client_1.getArrayIfSingleItem)(output["ConfigurationTemplates"]["member"]), context);
    }
    if (output["ResourceLifecycleConfig"] !== undefined) {
        contents.ResourceLifecycleConfig = deserializeAws_queryApplicationResourceLifecycleConfig(output["ResourceLifecycleConfig"], context);
    }
    return contents;
};
const deserializeAws_queryApplicationDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryApplicationDescription(entry, context);
    });
};
const deserializeAws_queryApplicationDescriptionMessage = (output, context) => {
    const contents = {
        Application: undefined,
    };
    if (output["Application"] !== undefined) {
        contents.Application = deserializeAws_queryApplicationDescription(output["Application"], context);
    }
    return contents;
};
const deserializeAws_queryApplicationDescriptionsMessage = (output, context) => {
    const contents = {
        Applications: undefined,
    };
    if (output.Applications === "") {
        contents.Applications = [];
    }
    else if (output["Applications"] !== undefined && output["Applications"]["member"] !== undefined) {
        contents.Applications = deserializeAws_queryApplicationDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["Applications"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryApplicationMetrics = (output, context) => {
    const contents = {
        Duration: undefined,
        RequestCount: undefined,
        StatusCodes: undefined,
        Latency: undefined,
    };
    if (output["Duration"] !== undefined) {
        contents.Duration = (0, smithy_client_1.strictParseInt32)(output["Duration"]);
    }
    if (output["RequestCount"] !== undefined) {
        contents.RequestCount = (0, smithy_client_1.strictParseInt32)(output["RequestCount"]);
    }
    if (output["StatusCodes"] !== undefined) {
        contents.StatusCodes = deserializeAws_queryStatusCodes(output["StatusCodes"], context);
    }
    if (output["Latency"] !== undefined) {
        contents.Latency = deserializeAws_queryLatency(output["Latency"], context);
    }
    return contents;
};
const deserializeAws_queryApplicationResourceLifecycleConfig = (output, context) => {
    const contents = {
        ServiceRole: undefined,
        VersionLifecycleConfig: undefined,
    };
    if (output["ServiceRole"] !== undefined) {
        contents.ServiceRole = (0, smithy_client_1.expectString)(output["ServiceRole"]);
    }
    if (output["VersionLifecycleConfig"] !== undefined) {
        contents.VersionLifecycleConfig = deserializeAws_queryApplicationVersionLifecycleConfig(output["VersionLifecycleConfig"], context);
    }
    return contents;
};
const deserializeAws_queryApplicationResourceLifecycleDescriptionMessage = (output, context) => {
    const contents = {
        ApplicationName: undefined,
        ResourceLifecycleConfig: undefined,
    };
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = (0, smithy_client_1.expectString)(output["ApplicationName"]);
    }
    if (output["ResourceLifecycleConfig"] !== undefined) {
        contents.ResourceLifecycleConfig = deserializeAws_queryApplicationResourceLifecycleConfig(output["ResourceLifecycleConfig"], context);
    }
    return contents;
};
const deserializeAws_queryApplicationVersionDescription = (output, context) => {
    const contents = {
        ApplicationVersionArn: undefined,
        ApplicationName: undefined,
        Description: undefined,
        VersionLabel: undefined,
        SourceBuildInformation: undefined,
        BuildArn: undefined,
        SourceBundle: undefined,
        DateCreated: undefined,
        DateUpdated: undefined,
        Status: undefined,
    };
    if (output["ApplicationVersionArn"] !== undefined) {
        contents.ApplicationVersionArn = (0, smithy_client_1.expectString)(output["ApplicationVersionArn"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = (0, smithy_client_1.expectString)(output["ApplicationName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = (0, smithy_client_1.expectString)(output["VersionLabel"]);
    }
    if (output["SourceBuildInformation"] !== undefined) {
        contents.SourceBuildInformation = deserializeAws_querySourceBuildInformation(output["SourceBuildInformation"], context);
    }
    if (output["BuildArn"] !== undefined) {
        contents.BuildArn = (0, smithy_client_1.expectString)(output["BuildArn"]);
    }
    if (output["SourceBundle"] !== undefined) {
        contents.SourceBundle = deserializeAws_queryS3Location(output["SourceBundle"], context);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateUpdated"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryApplicationVersionDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryApplicationVersionDescription(entry, context);
    });
};
const deserializeAws_queryApplicationVersionDescriptionMessage = (output, context) => {
    const contents = {
        ApplicationVersion: undefined,
    };
    if (output["ApplicationVersion"] !== undefined) {
        contents.ApplicationVersion = deserializeAws_queryApplicationVersionDescription(output["ApplicationVersion"], context);
    }
    return contents;
};
const deserializeAws_queryApplicationVersionDescriptionsMessage = (output, context) => {
    const contents = {
        ApplicationVersions: undefined,
        NextToken: undefined,
    };
    if (output.ApplicationVersions === "") {
        contents.ApplicationVersions = [];
    }
    else if (output["ApplicationVersions"] !== undefined && output["ApplicationVersions"]["member"] !== undefined) {
        contents.ApplicationVersions = deserializeAws_queryApplicationVersionDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["ApplicationVersions"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryApplicationVersionLifecycleConfig = (output, context) => {
    const contents = {
        MaxCountRule: undefined,
        MaxAgeRule: undefined,
    };
    if (output["MaxCountRule"] !== undefined) {
        contents.MaxCountRule = deserializeAws_queryMaxCountRule(output["MaxCountRule"], context);
    }
    if (output["MaxAgeRule"] !== undefined) {
        contents.MaxAgeRule = deserializeAws_queryMaxAgeRule(output["MaxAgeRule"], context);
    }
    return contents;
};
const deserializeAws_queryApplyEnvironmentManagedActionResult = (output, context) => {
    const contents = {
        ActionId: undefined,
        ActionDescription: undefined,
        ActionType: undefined,
        Status: undefined,
    };
    if (output["ActionId"] !== undefined) {
        contents.ActionId = (0, smithy_client_1.expectString)(output["ActionId"]);
    }
    if (output["ActionDescription"] !== undefined) {
        contents.ActionDescription = (0, smithy_client_1.expectString)(output["ActionDescription"]);
    }
    if (output["ActionType"] !== undefined) {
        contents.ActionType = (0, smithy_client_1.expectString)(output["ActionType"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    return contents;
};
const deserializeAws_queryAutoScalingGroup = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const deserializeAws_queryAutoScalingGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAutoScalingGroup(entry, context);
    });
};
const deserializeAws_queryAvailableSolutionStackDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySolutionStackDescription(entry, context);
    });
};
const deserializeAws_queryAvailableSolutionStackNamesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryBuilder = (output, context) => {
    const contents = {
        ARN: undefined,
    };
    if (output["ARN"] !== undefined) {
        contents.ARN = (0, smithy_client_1.expectString)(output["ARN"]);
    }
    return contents;
};
const deserializeAws_queryCauses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryCheckDNSAvailabilityResultMessage = (output, context) => {
    const contents = {
        Available: undefined,
        FullyQualifiedCNAME: undefined,
    };
    if (output["Available"] !== undefined) {
        contents.Available = (0, smithy_client_1.parseBoolean)(output["Available"]);
    }
    if (output["FullyQualifiedCNAME"] !== undefined) {
        contents.FullyQualifiedCNAME = (0, smithy_client_1.expectString)(output["FullyQualifiedCNAME"]);
    }
    return contents;
};
const deserializeAws_queryCodeBuildNotInServiceRegionException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryConfigurationOptionDescription = (output, context) => {
    const contents = {
        Namespace: undefined,
        Name: undefined,
        DefaultValue: undefined,
        ChangeSeverity: undefined,
        UserDefined: undefined,
        ValueType: undefined,
        ValueOptions: undefined,
        MinValue: undefined,
        MaxValue: undefined,
        MaxLength: undefined,
        Regex: undefined,
    };
    if (output["Namespace"] !== undefined) {
        contents.Namespace = (0, smithy_client_1.expectString)(output["Namespace"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = (0, smithy_client_1.expectString)(output["DefaultValue"]);
    }
    if (output["ChangeSeverity"] !== undefined) {
        contents.ChangeSeverity = (0, smithy_client_1.expectString)(output["ChangeSeverity"]);
    }
    if (output["UserDefined"] !== undefined) {
        contents.UserDefined = (0, smithy_client_1.parseBoolean)(output["UserDefined"]);
    }
    if (output["ValueType"] !== undefined) {
        contents.ValueType = (0, smithy_client_1.expectString)(output["ValueType"]);
    }
    if (output.ValueOptions === "") {
        contents.ValueOptions = [];
    }
    else if (output["ValueOptions"] !== undefined && output["ValueOptions"]["member"] !== undefined) {
        contents.ValueOptions = deserializeAws_queryConfigurationOptionPossibleValues((0, smithy_client_1.getArrayIfSingleItem)(output["ValueOptions"]["member"]), context);
    }
    if (output["MinValue"] !== undefined) {
        contents.MinValue = (0, smithy_client_1.strictParseInt32)(output["MinValue"]);
    }
    if (output["MaxValue"] !== undefined) {
        contents.MaxValue = (0, smithy_client_1.strictParseInt32)(output["MaxValue"]);
    }
    if (output["MaxLength"] !== undefined) {
        contents.MaxLength = (0, smithy_client_1.strictParseInt32)(output["MaxLength"]);
    }
    if (output["Regex"] !== undefined) {
        contents.Regex = deserializeAws_queryOptionRestrictionRegex(output["Regex"], context);
    }
    return contents;
};
const deserializeAws_queryConfigurationOptionDescriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryConfigurationOptionDescription(entry, context);
    });
};
const deserializeAws_queryConfigurationOptionPossibleValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryConfigurationOptionsDescription = (output, context) => {
    const contents = {
        SolutionStackName: undefined,
        PlatformArn: undefined,
        Options: undefined,
    };
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = (0, smithy_client_1.expectString)(output["SolutionStackName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = (0, smithy_client_1.expectString)(output["PlatformArn"]);
    }
    if (output.Options === "") {
        contents.Options = [];
    }
    else if (output["Options"] !== undefined && output["Options"]["member"] !== undefined) {
        contents.Options = deserializeAws_queryConfigurationOptionDescriptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["Options"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryConfigurationOptionSetting = (output, context) => {
    const contents = {
        ResourceName: undefined,
        Namespace: undefined,
        OptionName: undefined,
        Value: undefined,
    };
    if (output["ResourceName"] !== undefined) {
        contents.ResourceName = (0, smithy_client_1.expectString)(output["ResourceName"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = (0, smithy_client_1.expectString)(output["Namespace"]);
    }
    if (output["OptionName"] !== undefined) {
        contents.OptionName = (0, smithy_client_1.expectString)(output["OptionName"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryConfigurationOptionSettingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryConfigurationOptionSetting(entry, context);
    });
};
const deserializeAws_queryConfigurationSettingsDescription = (output, context) => {
    const contents = {
        SolutionStackName: undefined,
        PlatformArn: undefined,
        ApplicationName: undefined,
        TemplateName: undefined,
        Description: undefined,
        EnvironmentName: undefined,
        DeploymentStatus: undefined,
        DateCreated: undefined,
        DateUpdated: undefined,
        OptionSettings: undefined,
    };
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = (0, smithy_client_1.expectString)(output["SolutionStackName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = (0, smithy_client_1.expectString)(output["PlatformArn"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = (0, smithy_client_1.expectString)(output["ApplicationName"]);
    }
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = (0, smithy_client_1.expectString)(output["TemplateName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = (0, smithy_client_1.expectString)(output["EnvironmentName"]);
    }
    if (output["DeploymentStatus"] !== undefined) {
        contents.DeploymentStatus = (0, smithy_client_1.expectString)(output["DeploymentStatus"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateUpdated"]));
    }
    if (output.OptionSettings === "") {
        contents.OptionSettings = [];
    }
    else if (output["OptionSettings"] !== undefined && output["OptionSettings"]["member"] !== undefined) {
        contents.OptionSettings = deserializeAws_queryConfigurationOptionSettingsList((0, smithy_client_1.getArrayIfSingleItem)(output["OptionSettings"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryConfigurationSettingsDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryConfigurationSettingsDescription(entry, context);
    });
};
const deserializeAws_queryConfigurationSettingsDescriptions = (output, context) => {
    const contents = {
        ConfigurationSettings: undefined,
    };
    if (output.ConfigurationSettings === "") {
        contents.ConfigurationSettings = [];
    }
    else if (output["ConfigurationSettings"] !== undefined && output["ConfigurationSettings"]["member"] !== undefined) {
        contents.ConfigurationSettings = deserializeAws_queryConfigurationSettingsDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["ConfigurationSettings"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryConfigurationSettingsValidationMessages = (output, context) => {
    const contents = {
        Messages: undefined,
    };
    if (output.Messages === "") {
        contents.Messages = [];
    }
    else if (output["Messages"] !== undefined && output["Messages"]["member"] !== undefined) {
        contents.Messages = deserializeAws_queryValidationMessagesList((0, smithy_client_1.getArrayIfSingleItem)(output["Messages"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryConfigurationTemplateNamesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_queryCPUUtilization = (output, context) => {
    const contents = {
        User: undefined,
        Nice: undefined,
        System: undefined,
        Idle: undefined,
        IOWait: undefined,
        IRQ: undefined,
        SoftIRQ: undefined,
        Privileged: undefined,
    };
    if (output["User"] !== undefined) {
        contents.User = (0, smithy_client_1.strictParseFloat)(output["User"]);
    }
    if (output["Nice"] !== undefined) {
        contents.Nice = (0, smithy_client_1.strictParseFloat)(output["Nice"]);
    }
    if (output["System"] !== undefined) {
        contents.System = (0, smithy_client_1.strictParseFloat)(output["System"]);
    }
    if (output["Idle"] !== undefined) {
        contents.Idle = (0, smithy_client_1.strictParseFloat)(output["Idle"]);
    }
    if (output["IOWait"] !== undefined) {
        contents.IOWait = (0, smithy_client_1.strictParseFloat)(output["IOWait"]);
    }
    if (output["IRQ"] !== undefined) {
        contents.IRQ = (0, smithy_client_1.strictParseFloat)(output["IRQ"]);
    }
    if (output["SoftIRQ"] !== undefined) {
        contents.SoftIRQ = (0, smithy_client_1.strictParseFloat)(output["SoftIRQ"]);
    }
    if (output["Privileged"] !== undefined) {
        contents.Privileged = (0, smithy_client_1.strictParseFloat)(output["Privileged"]);
    }
    return contents;
};
const deserializeAws_queryCreatePlatformVersionResult = (output, context) => {
    const contents = {
        PlatformSummary: undefined,
        Builder: undefined,
    };
    if (output["PlatformSummary"] !== undefined) {
        contents.PlatformSummary = deserializeAws_queryPlatformSummary(output["PlatformSummary"], context);
    }
    if (output["Builder"] !== undefined) {
        contents.Builder = deserializeAws_queryBuilder(output["Builder"], context);
    }
    return contents;
};
const deserializeAws_queryCreateStorageLocationResultMessage = (output, context) => {
    const contents = {
        S3Bucket: undefined,
    };
    if (output["S3Bucket"] !== undefined) {
        contents.S3Bucket = (0, smithy_client_1.expectString)(output["S3Bucket"]);
    }
    return contents;
};
const deserializeAws_queryCustomAmi = (output, context) => {
    const contents = {
        VirtualizationType: undefined,
        ImageId: undefined,
    };
    if (output["VirtualizationType"] !== undefined) {
        contents.VirtualizationType = (0, smithy_client_1.expectString)(output["VirtualizationType"]);
    }
    if (output["ImageId"] !== undefined) {
        contents.ImageId = (0, smithy_client_1.expectString)(output["ImageId"]);
    }
    return contents;
};
const deserializeAws_queryCustomAmiList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryCustomAmi(entry, context);
    });
};
const deserializeAws_queryDeletePlatformVersionResult = (output, context) => {
    const contents = {
        PlatformSummary: undefined,
    };
    if (output["PlatformSummary"] !== undefined) {
        contents.PlatformSummary = deserializeAws_queryPlatformSummary(output["PlatformSummary"], context);
    }
    return contents;
};
const deserializeAws_queryDeployment = (output, context) => {
    const contents = {
        VersionLabel: undefined,
        DeploymentId: undefined,
        Status: undefined,
        DeploymentTime: undefined,
    };
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = (0, smithy_client_1.expectString)(output["VersionLabel"]);
    }
    if (output["DeploymentId"] !== undefined) {
        contents.DeploymentId = (0, smithy_client_1.strictParseLong)(output["DeploymentId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["DeploymentTime"] !== undefined) {
        contents.DeploymentTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DeploymentTime"]));
    }
    return contents;
};
const deserializeAws_queryDescribeAccountAttributesResult = (output, context) => {
    const contents = {
        ResourceQuotas: undefined,
    };
    if (output["ResourceQuotas"] !== undefined) {
        contents.ResourceQuotas = deserializeAws_queryResourceQuotas(output["ResourceQuotas"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeEnvironmentHealthResult = (output, context) => {
    const contents = {
        EnvironmentName: undefined,
        HealthStatus: undefined,
        Status: undefined,
        Color: undefined,
        Causes: undefined,
        ApplicationMetrics: undefined,
        InstancesHealth: undefined,
        RefreshedAt: undefined,
    };
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = (0, smithy_client_1.expectString)(output["EnvironmentName"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = (0, smithy_client_1.expectString)(output["HealthStatus"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["Color"] !== undefined) {
        contents.Color = (0, smithy_client_1.expectString)(output["Color"]);
    }
    if (output.Causes === "") {
        contents.Causes = [];
    }
    else if (output["Causes"] !== undefined && output["Causes"]["member"] !== undefined) {
        contents.Causes = deserializeAws_queryCauses((0, smithy_client_1.getArrayIfSingleItem)(output["Causes"]["member"]), context);
    }
    if (output["ApplicationMetrics"] !== undefined) {
        contents.ApplicationMetrics = deserializeAws_queryApplicationMetrics(output["ApplicationMetrics"], context);
    }
    if (output["InstancesHealth"] !== undefined) {
        contents.InstancesHealth = deserializeAws_queryInstanceHealthSummary(output["InstancesHealth"], context);
    }
    if (output["RefreshedAt"] !== undefined) {
        contents.RefreshedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["RefreshedAt"]));
    }
    return contents;
};
const deserializeAws_queryDescribeEnvironmentManagedActionHistoryResult = (output, context) => {
    const contents = {
        ManagedActionHistoryItems: undefined,
        NextToken: undefined,
    };
    if (output.ManagedActionHistoryItems === "") {
        contents.ManagedActionHistoryItems = [];
    }
    else if (output["ManagedActionHistoryItems"] !== undefined &&
        output["ManagedActionHistoryItems"]["member"] !== undefined) {
        contents.ManagedActionHistoryItems = deserializeAws_queryManagedActionHistoryItems((0, smithy_client_1.getArrayIfSingleItem)(output["ManagedActionHistoryItems"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeEnvironmentManagedActionsResult = (output, context) => {
    const contents = {
        ManagedActions: undefined,
    };
    if (output.ManagedActions === "") {
        contents.ManagedActions = [];
    }
    else if (output["ManagedActions"] !== undefined && output["ManagedActions"]["member"] !== undefined) {
        contents.ManagedActions = deserializeAws_queryManagedActions((0, smithy_client_1.getArrayIfSingleItem)(output["ManagedActions"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeInstancesHealthResult = (output, context) => {
    const contents = {
        InstanceHealthList: undefined,
        RefreshedAt: undefined,
        NextToken: undefined,
    };
    if (output.InstanceHealthList === "") {
        contents.InstanceHealthList = [];
    }
    else if (output["InstanceHealthList"] !== undefined && output["InstanceHealthList"]["member"] !== undefined) {
        contents.InstanceHealthList = deserializeAws_queryInstanceHealthList((0, smithy_client_1.getArrayIfSingleItem)(output["InstanceHealthList"]["member"]), context);
    }
    if (output["RefreshedAt"] !== undefined) {
        contents.RefreshedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["RefreshedAt"]));
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribePlatformVersionResult = (output, context) => {
    const contents = {
        PlatformDescription: undefined,
    };
    if (output["PlatformDescription"] !== undefined) {
        contents.PlatformDescription = deserializeAws_queryPlatformDescription(output["PlatformDescription"], context);
    }
    return contents;
};
const deserializeAws_queryElasticBeanstalkServiceException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryEnvironmentDescription = (output, context) => {
    const contents = {
        EnvironmentName: undefined,
        EnvironmentId: undefined,
        ApplicationName: undefined,
        VersionLabel: undefined,
        SolutionStackName: undefined,
        PlatformArn: undefined,
        TemplateName: undefined,
        Description: undefined,
        EndpointURL: undefined,
        CNAME: undefined,
        DateCreated: undefined,
        DateUpdated: undefined,
        Status: undefined,
        AbortableOperationInProgress: undefined,
        Health: undefined,
        HealthStatus: undefined,
        Resources: undefined,
        Tier: undefined,
        EnvironmentLinks: undefined,
        EnvironmentArn: undefined,
        OperationsRole: undefined,
    };
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = (0, smithy_client_1.expectString)(output["EnvironmentName"]);
    }
    if (output["EnvironmentId"] !== undefined) {
        contents.EnvironmentId = (0, smithy_client_1.expectString)(output["EnvironmentId"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = (0, smithy_client_1.expectString)(output["ApplicationName"]);
    }
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = (0, smithy_client_1.expectString)(output["VersionLabel"]);
    }
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = (0, smithy_client_1.expectString)(output["SolutionStackName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = (0, smithy_client_1.expectString)(output["PlatformArn"]);
    }
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = (0, smithy_client_1.expectString)(output["TemplateName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["EndpointURL"] !== undefined) {
        contents.EndpointURL = (0, smithy_client_1.expectString)(output["EndpointURL"]);
    }
    if (output["CNAME"] !== undefined) {
        contents.CNAME = (0, smithy_client_1.expectString)(output["CNAME"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateUpdated"]));
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["AbortableOperationInProgress"] !== undefined) {
        contents.AbortableOperationInProgress = (0, smithy_client_1.parseBoolean)(output["AbortableOperationInProgress"]);
    }
    if (output["Health"] !== undefined) {
        contents.Health = (0, smithy_client_1.expectString)(output["Health"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = (0, smithy_client_1.expectString)(output["HealthStatus"]);
    }
    if (output["Resources"] !== undefined) {
        contents.Resources = deserializeAws_queryEnvironmentResourcesDescription(output["Resources"], context);
    }
    if (output["Tier"] !== undefined) {
        contents.Tier = deserializeAws_queryEnvironmentTier(output["Tier"], context);
    }
    if (output.EnvironmentLinks === "") {
        contents.EnvironmentLinks = [];
    }
    else if (output["EnvironmentLinks"] !== undefined && output["EnvironmentLinks"]["member"] !== undefined) {
        contents.EnvironmentLinks = deserializeAws_queryEnvironmentLinks((0, smithy_client_1.getArrayIfSingleItem)(output["EnvironmentLinks"]["member"]), context);
    }
    if (output["EnvironmentArn"] !== undefined) {
        contents.EnvironmentArn = (0, smithy_client_1.expectString)(output["EnvironmentArn"]);
    }
    if (output["OperationsRole"] !== undefined) {
        contents.OperationsRole = (0, smithy_client_1.expectString)(output["OperationsRole"]);
    }
    return contents;
};
const deserializeAws_queryEnvironmentDescriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEnvironmentDescription(entry, context);
    });
};
const deserializeAws_queryEnvironmentDescriptionsMessage = (output, context) => {
    const contents = {
        Environments: undefined,
        NextToken: undefined,
    };
    if (output.Environments === "") {
        contents.Environments = [];
    }
    else if (output["Environments"] !== undefined && output["Environments"]["member"] !== undefined) {
        contents.Environments = deserializeAws_queryEnvironmentDescriptionsList((0, smithy_client_1.getArrayIfSingleItem)(output["Environments"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryEnvironmentInfoDescription = (output, context) => {
    const contents = {
        InfoType: undefined,
        Ec2InstanceId: undefined,
        SampleTimestamp: undefined,
        Message: undefined,
    };
    if (output["InfoType"] !== undefined) {
        contents.InfoType = (0, smithy_client_1.expectString)(output["InfoType"]);
    }
    if (output["Ec2InstanceId"] !== undefined) {
        contents.Ec2InstanceId = (0, smithy_client_1.expectString)(output["Ec2InstanceId"]);
    }
    if (output["SampleTimestamp"] !== undefined) {
        contents.SampleTimestamp = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["SampleTimestamp"]));
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryEnvironmentInfoDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEnvironmentInfoDescription(entry, context);
    });
};
const deserializeAws_queryEnvironmentLink = (output, context) => {
    const contents = {
        LinkName: undefined,
        EnvironmentName: undefined,
    };
    if (output["LinkName"] !== undefined) {
        contents.LinkName = (0, smithy_client_1.expectString)(output["LinkName"]);
    }
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = (0, smithy_client_1.expectString)(output["EnvironmentName"]);
    }
    return contents;
};
const deserializeAws_queryEnvironmentLinks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEnvironmentLink(entry, context);
    });
};
const deserializeAws_queryEnvironmentResourceDescription = (output, context) => {
    const contents = {
        EnvironmentName: undefined,
        AutoScalingGroups: undefined,
        Instances: undefined,
        LaunchConfigurations: undefined,
        LaunchTemplates: undefined,
        LoadBalancers: undefined,
        Triggers: undefined,
        Queues: undefined,
    };
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = (0, smithy_client_1.expectString)(output["EnvironmentName"]);
    }
    if (output.AutoScalingGroups === "") {
        contents.AutoScalingGroups = [];
    }
    else if (output["AutoScalingGroups"] !== undefined && output["AutoScalingGroups"]["member"] !== undefined) {
        contents.AutoScalingGroups = deserializeAws_queryAutoScalingGroupList((0, smithy_client_1.getArrayIfSingleItem)(output["AutoScalingGroups"]["member"]), context);
    }
    if (output.Instances === "") {
        contents.Instances = [];
    }
    else if (output["Instances"] !== undefined && output["Instances"]["member"] !== undefined) {
        contents.Instances = deserializeAws_queryInstanceList((0, smithy_client_1.getArrayIfSingleItem)(output["Instances"]["member"]), context);
    }
    if (output.LaunchConfigurations === "") {
        contents.LaunchConfigurations = [];
    }
    else if (output["LaunchConfigurations"] !== undefined && output["LaunchConfigurations"]["member"] !== undefined) {
        contents.LaunchConfigurations = deserializeAws_queryLaunchConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(output["LaunchConfigurations"]["member"]), context);
    }
    if (output.LaunchTemplates === "") {
        contents.LaunchTemplates = [];
    }
    else if (output["LaunchTemplates"] !== undefined && output["LaunchTemplates"]["member"] !== undefined) {
        contents.LaunchTemplates = deserializeAws_queryLaunchTemplateList((0, smithy_client_1.getArrayIfSingleItem)(output["LaunchTemplates"]["member"]), context);
    }
    if (output.LoadBalancers === "") {
        contents.LoadBalancers = [];
    }
    else if (output["LoadBalancers"] !== undefined && output["LoadBalancers"]["member"] !== undefined) {
        contents.LoadBalancers = deserializeAws_queryLoadBalancerList((0, smithy_client_1.getArrayIfSingleItem)(output["LoadBalancers"]["member"]), context);
    }
    if (output.Triggers === "") {
        contents.Triggers = [];
    }
    else if (output["Triggers"] !== undefined && output["Triggers"]["member"] !== undefined) {
        contents.Triggers = deserializeAws_queryTriggerList((0, smithy_client_1.getArrayIfSingleItem)(output["Triggers"]["member"]), context);
    }
    if (output.Queues === "") {
        contents.Queues = [];
    }
    else if (output["Queues"] !== undefined && output["Queues"]["member"] !== undefined) {
        contents.Queues = deserializeAws_queryQueueList((0, smithy_client_1.getArrayIfSingleItem)(output["Queues"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryEnvironmentResourceDescriptionsMessage = (output, context) => {
    const contents = {
        EnvironmentResources: undefined,
    };
    if (output["EnvironmentResources"] !== undefined) {
        contents.EnvironmentResources = deserializeAws_queryEnvironmentResourceDescription(output["EnvironmentResources"], context);
    }
    return contents;
};
const deserializeAws_queryEnvironmentResourcesDescription = (output, context) => {
    const contents = {
        LoadBalancer: undefined,
    };
    if (output["LoadBalancer"] !== undefined) {
        contents.LoadBalancer = deserializeAws_queryLoadBalancerDescription(output["LoadBalancer"], context);
    }
    return contents;
};
const deserializeAws_queryEnvironmentTier = (output, context) => {
    const contents = {
        Name: undefined,
        Type: undefined,
        Version: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = (0, smithy_client_1.expectString)(output["Type"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.expectString)(output["Version"]);
    }
    return contents;
};
const deserializeAws_queryEventDescription = (output, context) => {
    const contents = {
        EventDate: undefined,
        Message: undefined,
        ApplicationName: undefined,
        VersionLabel: undefined,
        TemplateName: undefined,
        EnvironmentName: undefined,
        PlatformArn: undefined,
        RequestId: undefined,
        Severity: undefined,
    };
    if (output["EventDate"] !== undefined) {
        contents.EventDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["EventDate"]));
    }
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output["ApplicationName"] !== undefined) {
        contents.ApplicationName = (0, smithy_client_1.expectString)(output["ApplicationName"]);
    }
    if (output["VersionLabel"] !== undefined) {
        contents.VersionLabel = (0, smithy_client_1.expectString)(output["VersionLabel"]);
    }
    if (output["TemplateName"] !== undefined) {
        contents.TemplateName = (0, smithy_client_1.expectString)(output["TemplateName"]);
    }
    if (output["EnvironmentName"] !== undefined) {
        contents.EnvironmentName = (0, smithy_client_1.expectString)(output["EnvironmentName"]);
    }
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = (0, smithy_client_1.expectString)(output["PlatformArn"]);
    }
    if (output["RequestId"] !== undefined) {
        contents.RequestId = (0, smithy_client_1.expectString)(output["RequestId"]);
    }
    if (output["Severity"] !== undefined) {
        contents.Severity = (0, smithy_client_1.expectString)(output["Severity"]);
    }
    return contents;
};
const deserializeAws_queryEventDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryEventDescription(entry, context);
    });
};
const deserializeAws_queryEventDescriptionsMessage = (output, context) => {
    const contents = {
        Events: undefined,
        NextToken: undefined,
    };
    if (output.Events === "") {
        contents.Events = [];
    }
    else if (output["Events"] !== undefined && output["Events"]["member"] !== undefined) {
        contents.Events = deserializeAws_queryEventDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["Events"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryInstance = (output, context) => {
    const contents = {
        Id: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    return contents;
};
const deserializeAws_queryInstanceHealthList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_querySingleInstanceHealth(entry, context);
    });
};
const deserializeAws_queryInstanceHealthSummary = (output, context) => {
    const contents = {
        NoData: undefined,
        Unknown: undefined,
        Pending: undefined,
        Ok: undefined,
        Info: undefined,
        Warning: undefined,
        Degraded: undefined,
        Severe: undefined,
    };
    if (output["NoData"] !== undefined) {
        contents.NoData = (0, smithy_client_1.strictParseInt32)(output["NoData"]);
    }
    if (output["Unknown"] !== undefined) {
        contents.Unknown = (0, smithy_client_1.strictParseInt32)(output["Unknown"]);
    }
    if (output["Pending"] !== undefined) {
        contents.Pending = (0, smithy_client_1.strictParseInt32)(output["Pending"]);
    }
    if (output["Ok"] !== undefined) {
        contents.Ok = (0, smithy_client_1.strictParseInt32)(output["Ok"]);
    }
    if (output["Info"] !== undefined) {
        contents.Info = (0, smithy_client_1.strictParseInt32)(output["Info"]);
    }
    if (output["Warning"] !== undefined) {
        contents.Warning = (0, smithy_client_1.strictParseInt32)(output["Warning"]);
    }
    if (output["Degraded"] !== undefined) {
        contents.Degraded = (0, smithy_client_1.strictParseInt32)(output["Degraded"]);
    }
    if (output["Severe"] !== undefined) {
        contents.Severe = (0, smithy_client_1.strictParseInt32)(output["Severe"]);
    }
    return contents;
};
const deserializeAws_queryInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryInstance(entry, context);
    });
};
const deserializeAws_queryInsufficientPrivilegesException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidRequestException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryLatency = (output, context) => {
    const contents = {
        P999: undefined,
        P99: undefined,
        P95: undefined,
        P90: undefined,
        P85: undefined,
        P75: undefined,
        P50: undefined,
        P10: undefined,
    };
    if (output["P999"] !== undefined) {
        contents.P999 = (0, smithy_client_1.strictParseFloat)(output["P999"]);
    }
    if (output["P99"] !== undefined) {
        contents.P99 = (0, smithy_client_1.strictParseFloat)(output["P99"]);
    }
    if (output["P95"] !== undefined) {
        contents.P95 = (0, smithy_client_1.strictParseFloat)(output["P95"]);
    }
    if (output["P90"] !== undefined) {
        contents.P90 = (0, smithy_client_1.strictParseFloat)(output["P90"]);
    }
    if (output["P85"] !== undefined) {
        contents.P85 = (0, smithy_client_1.strictParseFloat)(output["P85"]);
    }
    if (output["P75"] !== undefined) {
        contents.P75 = (0, smithy_client_1.strictParseFloat)(output["P75"]);
    }
    if (output["P50"] !== undefined) {
        contents.P50 = (0, smithy_client_1.strictParseFloat)(output["P50"]);
    }
    if (output["P10"] !== undefined) {
        contents.P10 = (0, smithy_client_1.strictParseFloat)(output["P10"]);
    }
    return contents;
};
const deserializeAws_queryLaunchConfiguration = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const deserializeAws_queryLaunchConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLaunchConfiguration(entry, context);
    });
};
const deserializeAws_queryLaunchTemplate = (output, context) => {
    const contents = {
        Id: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
    }
    return contents;
};
const deserializeAws_queryLaunchTemplateList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLaunchTemplate(entry, context);
    });
};
const deserializeAws_queryListAvailableSolutionStacksResultMessage = (output, context) => {
    const contents = {
        SolutionStacks: undefined,
        SolutionStackDetails: undefined,
    };
    if (output.SolutionStacks === "") {
        contents.SolutionStacks = [];
    }
    else if (output["SolutionStacks"] !== undefined && output["SolutionStacks"]["member"] !== undefined) {
        contents.SolutionStacks = deserializeAws_queryAvailableSolutionStackNamesList((0, smithy_client_1.getArrayIfSingleItem)(output["SolutionStacks"]["member"]), context);
    }
    if (output.SolutionStackDetails === "") {
        contents.SolutionStackDetails = [];
    }
    else if (output["SolutionStackDetails"] !== undefined && output["SolutionStackDetails"]["member"] !== undefined) {
        contents.SolutionStackDetails = deserializeAws_queryAvailableSolutionStackDetailsList((0, smithy_client_1.getArrayIfSingleItem)(output["SolutionStackDetails"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryListener = (output, context) => {
    const contents = {
        Protocol: undefined,
        Port: undefined,
    };
    if (output["Protocol"] !== undefined) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["Protocol"]);
    }
    if (output["Port"] !== undefined) {
        contents.Port = (0, smithy_client_1.strictParseInt32)(output["Port"]);
    }
    return contents;
};
const deserializeAws_queryListPlatformBranchesResult = (output, context) => {
    const contents = {
        PlatformBranchSummaryList: undefined,
        NextToken: undefined,
    };
    if (output.PlatformBranchSummaryList === "") {
        contents.PlatformBranchSummaryList = [];
    }
    else if (output["PlatformBranchSummaryList"] !== undefined &&
        output["PlatformBranchSummaryList"]["member"] !== undefined) {
        contents.PlatformBranchSummaryList = deserializeAws_queryPlatformBranchSummaryList((0, smithy_client_1.getArrayIfSingleItem)(output["PlatformBranchSummaryList"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListPlatformVersionsResult = (output, context) => {
    const contents = {
        PlatformSummaryList: undefined,
        NextToken: undefined,
    };
    if (output.PlatformSummaryList === "") {
        contents.PlatformSummaryList = [];
    }
    else if (output["PlatformSummaryList"] !== undefined && output["PlatformSummaryList"]["member"] !== undefined) {
        contents.PlatformSummaryList = deserializeAws_queryPlatformSummaryList((0, smithy_client_1.getArrayIfSingleItem)(output["PlatformSummaryList"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = (0, smithy_client_1.expectString)(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryLoadAverage = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.strictParseFloat)(entry);
    });
};
const deserializeAws_queryLoadBalancer = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const deserializeAws_queryLoadBalancerDescription = (output, context) => {
    const contents = {
        LoadBalancerName: undefined,
        Domain: undefined,
        Listeners: undefined,
    };
    if (output["LoadBalancerName"] !== undefined) {
        contents.LoadBalancerName = (0, smithy_client_1.expectString)(output["LoadBalancerName"]);
    }
    if (output["Domain"] !== undefined) {
        contents.Domain = (0, smithy_client_1.expectString)(output["Domain"]);
    }
    if (output.Listeners === "") {
        contents.Listeners = [];
    }
    else if (output["Listeners"] !== undefined && output["Listeners"]["member"] !== undefined) {
        contents.Listeners = deserializeAws_queryLoadBalancerListenersDescription((0, smithy_client_1.getArrayIfSingleItem)(output["Listeners"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryLoadBalancerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryLoadBalancer(entry, context);
    });
};
const deserializeAws_queryLoadBalancerListenersDescription = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryListener(entry, context);
    });
};
const deserializeAws_queryManagedAction = (output, context) => {
    const contents = {
        ActionId: undefined,
        ActionDescription: undefined,
        ActionType: undefined,
        Status: undefined,
        WindowStartTime: undefined,
    };
    if (output["ActionId"] !== undefined) {
        contents.ActionId = (0, smithy_client_1.expectString)(output["ActionId"]);
    }
    if (output["ActionDescription"] !== undefined) {
        contents.ActionDescription = (0, smithy_client_1.expectString)(output["ActionDescription"]);
    }
    if (output["ActionType"] !== undefined) {
        contents.ActionType = (0, smithy_client_1.expectString)(output["ActionType"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["WindowStartTime"] !== undefined) {
        contents.WindowStartTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["WindowStartTime"]));
    }
    return contents;
};
const deserializeAws_queryManagedActionHistoryItem = (output, context) => {
    const contents = {
        ActionId: undefined,
        ActionType: undefined,
        ActionDescription: undefined,
        FailureType: undefined,
        Status: undefined,
        FailureDescription: undefined,
        ExecutedTime: undefined,
        FinishedTime: undefined,
    };
    if (output["ActionId"] !== undefined) {
        contents.ActionId = (0, smithy_client_1.expectString)(output["ActionId"]);
    }
    if (output["ActionType"] !== undefined) {
        contents.ActionType = (0, smithy_client_1.expectString)(output["ActionType"]);
    }
    if (output["ActionDescription"] !== undefined) {
        contents.ActionDescription = (0, smithy_client_1.expectString)(output["ActionDescription"]);
    }
    if (output["FailureType"] !== undefined) {
        contents.FailureType = (0, smithy_client_1.expectString)(output["FailureType"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
    }
    if (output["FailureDescription"] !== undefined) {
        contents.FailureDescription = (0, smithy_client_1.expectString)(output["FailureDescription"]);
    }
    if (output["ExecutedTime"] !== undefined) {
        contents.ExecutedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["ExecutedTime"]));
    }
    if (output["FinishedTime"] !== undefined) {
        contents.FinishedTime = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["FinishedTime"]));
    }
    return contents;
};
const deserializeAws_queryManagedActionHistoryItems = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryManagedActionHistoryItem(entry, context);
    });
};
const deserializeAws_queryManagedActionInvalidStateException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryManagedActions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryManagedAction(entry, context);
    });
};
const deserializeAws_queryMaxAgeRule = (output, context) => {
    const contents = {
        Enabled: undefined,
        MaxAgeInDays: undefined,
        DeleteSourceFromS3: undefined,
    };
    if (output["Enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
    }
    if (output["MaxAgeInDays"] !== undefined) {
        contents.MaxAgeInDays = (0, smithy_client_1.strictParseInt32)(output["MaxAgeInDays"]);
    }
    if (output["DeleteSourceFromS3"] !== undefined) {
        contents.DeleteSourceFromS3 = (0, smithy_client_1.parseBoolean)(output["DeleteSourceFromS3"]);
    }
    return contents;
};
const deserializeAws_queryMaxCountRule = (output, context) => {
    const contents = {
        Enabled: undefined,
        MaxCount: undefined,
        DeleteSourceFromS3: undefined,
    };
    if (output["Enabled"] !== undefined) {
        contents.Enabled = (0, smithy_client_1.parseBoolean)(output["Enabled"]);
    }
    if (output["MaxCount"] !== undefined) {
        contents.MaxCount = (0, smithy_client_1.strictParseInt32)(output["MaxCount"]);
    }
    if (output["DeleteSourceFromS3"] !== undefined) {
        contents.DeleteSourceFromS3 = (0, smithy_client_1.parseBoolean)(output["DeleteSourceFromS3"]);
    }
    return contents;
};
const deserializeAws_queryOperationInProgressException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryOptionRestrictionRegex = (output, context) => {
    const contents = {
        Pattern: undefined,
        Label: undefined,
    };
    if (output["Pattern"] !== undefined) {
        contents.Pattern = (0, smithy_client_1.expectString)(output["Pattern"]);
    }
    if (output["Label"] !== undefined) {
        contents.Label = (0, smithy_client_1.expectString)(output["Label"]);
    }
    return contents;
};
const deserializeAws_queryPlatformBranchSummary = (output, context) => {
    const contents = {
        PlatformName: undefined,
        BranchName: undefined,
        LifecycleState: undefined,
        BranchOrder: undefined,
        SupportedTierList: undefined,
    };
    if (output["PlatformName"] !== undefined) {
        contents.PlatformName = (0, smithy_client_1.expectString)(output["PlatformName"]);
    }
    if (output["BranchName"] !== undefined) {
        contents.BranchName = (0, smithy_client_1.expectString)(output["BranchName"]);
    }
    if (output["LifecycleState"] !== undefined) {
        contents.LifecycleState = (0, smithy_client_1.expectString)(output["LifecycleState"]);
    }
    if (output["BranchOrder"] !== undefined) {
        contents.BranchOrder = (0, smithy_client_1.strictParseInt32)(output["BranchOrder"]);
    }
    if (output.SupportedTierList === "") {
        contents.SupportedTierList = [];
    }
    else if (output["SupportedTierList"] !== undefined && output["SupportedTierList"]["member"] !== undefined) {
        contents.SupportedTierList = deserializeAws_querySupportedTierList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedTierList"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryPlatformBranchSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPlatformBranchSummary(entry, context);
    });
};
const deserializeAws_queryPlatformDescription = (output, context) => {
    const contents = {
        PlatformArn: undefined,
        PlatformOwner: undefined,
        PlatformName: undefined,
        PlatformVersion: undefined,
        SolutionStackName: undefined,
        PlatformStatus: undefined,
        DateCreated: undefined,
        DateUpdated: undefined,
        PlatformCategory: undefined,
        Description: undefined,
        Maintainer: undefined,
        OperatingSystemName: undefined,
        OperatingSystemVersion: undefined,
        ProgrammingLanguages: undefined,
        Frameworks: undefined,
        CustomAmiList: undefined,
        SupportedTierList: undefined,
        SupportedAddonList: undefined,
        PlatformLifecycleState: undefined,
        PlatformBranchName: undefined,
        PlatformBranchLifecycleState: undefined,
    };
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = (0, smithy_client_1.expectString)(output["PlatformArn"]);
    }
    if (output["PlatformOwner"] !== undefined) {
        contents.PlatformOwner = (0, smithy_client_1.expectString)(output["PlatformOwner"]);
    }
    if (output["PlatformName"] !== undefined) {
        contents.PlatformName = (0, smithy_client_1.expectString)(output["PlatformName"]);
    }
    if (output["PlatformVersion"] !== undefined) {
        contents.PlatformVersion = (0, smithy_client_1.expectString)(output["PlatformVersion"]);
    }
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = (0, smithy_client_1.expectString)(output["SolutionStackName"]);
    }
    if (output["PlatformStatus"] !== undefined) {
        contents.PlatformStatus = (0, smithy_client_1.expectString)(output["PlatformStatus"]);
    }
    if (output["DateCreated"] !== undefined) {
        contents.DateCreated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateCreated"]));
    }
    if (output["DateUpdated"] !== undefined) {
        contents.DateUpdated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["DateUpdated"]));
    }
    if (output["PlatformCategory"] !== undefined) {
        contents.PlatformCategory = (0, smithy_client_1.expectString)(output["PlatformCategory"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = (0, smithy_client_1.expectString)(output["Description"]);
    }
    if (output["Maintainer"] !== undefined) {
        contents.Maintainer = (0, smithy_client_1.expectString)(output["Maintainer"]);
    }
    if (output["OperatingSystemName"] !== undefined) {
        contents.OperatingSystemName = (0, smithy_client_1.expectString)(output["OperatingSystemName"]);
    }
    if (output["OperatingSystemVersion"] !== undefined) {
        contents.OperatingSystemVersion = (0, smithy_client_1.expectString)(output["OperatingSystemVersion"]);
    }
    if (output.ProgrammingLanguages === "") {
        contents.ProgrammingLanguages = [];
    }
    else if (output["ProgrammingLanguages"] !== undefined && output["ProgrammingLanguages"]["member"] !== undefined) {
        contents.ProgrammingLanguages = deserializeAws_queryPlatformProgrammingLanguages((0, smithy_client_1.getArrayIfSingleItem)(output["ProgrammingLanguages"]["member"]), context);
    }
    if (output.Frameworks === "") {
        contents.Frameworks = [];
    }
    else if (output["Frameworks"] !== undefined && output["Frameworks"]["member"] !== undefined) {
        contents.Frameworks = deserializeAws_queryPlatformFrameworks((0, smithy_client_1.getArrayIfSingleItem)(output["Frameworks"]["member"]), context);
    }
    if (output.CustomAmiList === "") {
        contents.CustomAmiList = [];
    }
    else if (output["CustomAmiList"] !== undefined && output["CustomAmiList"]["member"] !== undefined) {
        contents.CustomAmiList = deserializeAws_queryCustomAmiList((0, smithy_client_1.getArrayIfSingleItem)(output["CustomAmiList"]["member"]), context);
    }
    if (output.SupportedTierList === "") {
        contents.SupportedTierList = [];
    }
    else if (output["SupportedTierList"] !== undefined && output["SupportedTierList"]["member"] !== undefined) {
        contents.SupportedTierList = deserializeAws_querySupportedTierList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedTierList"]["member"]), context);
    }
    if (output.SupportedAddonList === "") {
        contents.SupportedAddonList = [];
    }
    else if (output["SupportedAddonList"] !== undefined && output["SupportedAddonList"]["member"] !== undefined) {
        contents.SupportedAddonList = deserializeAws_querySupportedAddonList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedAddonList"]["member"]), context);
    }
    if (output["PlatformLifecycleState"] !== undefined) {
        contents.PlatformLifecycleState = (0, smithy_client_1.expectString)(output["PlatformLifecycleState"]);
    }
    if (output["PlatformBranchName"] !== undefined) {
        contents.PlatformBranchName = (0, smithy_client_1.expectString)(output["PlatformBranchName"]);
    }
    if (output["PlatformBranchLifecycleState"] !== undefined) {
        contents.PlatformBranchLifecycleState = (0, smithy_client_1.expectString)(output["PlatformBranchLifecycleState"]);
    }
    return contents;
};
const deserializeAws_queryPlatformFramework = (output, context) => {
    const contents = {
        Name: undefined,
        Version: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.expectString)(output["Version"]);
    }
    return contents;
};
const deserializeAws_queryPlatformFrameworks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPlatformFramework(entry, context);
    });
};
const deserializeAws_queryPlatformProgrammingLanguage = (output, context) => {
    const contents = {
        Name: undefined,
        Version: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["Version"] !== undefined) {
        contents.Version = (0, smithy_client_1.expectString)(output["Version"]);
    }
    return contents;
};
const deserializeAws_queryPlatformProgrammingLanguages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPlatformProgrammingLanguage(entry, context);
    });
};
const deserializeAws_queryPlatformSummary = (output, context) => {
    const contents = {
        PlatformArn: undefined,
        PlatformOwner: undefined,
        PlatformStatus: undefined,
        PlatformCategory: undefined,
        OperatingSystemName: undefined,
        OperatingSystemVersion: undefined,
        SupportedTierList: undefined,
        SupportedAddonList: undefined,
        PlatformLifecycleState: undefined,
        PlatformVersion: undefined,
        PlatformBranchName: undefined,
        PlatformBranchLifecycleState: undefined,
    };
    if (output["PlatformArn"] !== undefined) {
        contents.PlatformArn = (0, smithy_client_1.expectString)(output["PlatformArn"]);
    }
    if (output["PlatformOwner"] !== undefined) {
        contents.PlatformOwner = (0, smithy_client_1.expectString)(output["PlatformOwner"]);
    }
    if (output["PlatformStatus"] !== undefined) {
        contents.PlatformStatus = (0, smithy_client_1.expectString)(output["PlatformStatus"]);
    }
    if (output["PlatformCategory"] !== undefined) {
        contents.PlatformCategory = (0, smithy_client_1.expectString)(output["PlatformCategory"]);
    }
    if (output["OperatingSystemName"] !== undefined) {
        contents.OperatingSystemName = (0, smithy_client_1.expectString)(output["OperatingSystemName"]);
    }
    if (output["OperatingSystemVersion"] !== undefined) {
        contents.OperatingSystemVersion = (0, smithy_client_1.expectString)(output["OperatingSystemVersion"]);
    }
    if (output.SupportedTierList === "") {
        contents.SupportedTierList = [];
    }
    else if (output["SupportedTierList"] !== undefined && output["SupportedTierList"]["member"] !== undefined) {
        contents.SupportedTierList = deserializeAws_querySupportedTierList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedTierList"]["member"]), context);
    }
    if (output.SupportedAddonList === "") {
        contents.SupportedAddonList = [];
    }
    else if (output["SupportedAddonList"] !== undefined && output["SupportedAddonList"]["member"] !== undefined) {
        contents.SupportedAddonList = deserializeAws_querySupportedAddonList((0, smithy_client_1.getArrayIfSingleItem)(output["SupportedAddonList"]["member"]), context);
    }
    if (output["PlatformLifecycleState"] !== undefined) {
        contents.PlatformLifecycleState = (0, smithy_client_1.expectString)(output["PlatformLifecycleState"]);
    }
    if (output["PlatformVersion"] !== undefined) {
        contents.PlatformVersion = (0, smithy_client_1.expectString)(output["PlatformVersion"]);
    }
    if (output["PlatformBranchName"] !== undefined) {
        contents.PlatformBranchName = (0, smithy_client_1.expectString)(output["PlatformBranchName"]);
    }
    if (output["PlatformBranchLifecycleState"] !== undefined) {
        contents.PlatformBranchLifecycleState = (0, smithy_client_1.expectString)(output["PlatformBranchLifecycleState"]);
    }
    return contents;
};
const deserializeAws_queryPlatformSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPlatformSummary(entry, context);
    });
};
const deserializeAws_queryPlatformVersionStillReferencedException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryQueue = (output, context) => {
    const contents = {
        Name: undefined,
        URL: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    if (output["URL"] !== undefined) {
        contents.URL = (0, smithy_client_1.expectString)(output["URL"]);
    }
    return contents;
};
const deserializeAws_queryQueueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryQueue(entry, context);
    });
};
const deserializeAws_queryResourceNotFoundException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryResourceQuota = (output, context) => {
    const contents = {
        Maximum: undefined,
    };
    if (output["Maximum"] !== undefined) {
        contents.Maximum = (0, smithy_client_1.strictParseInt32)(output["Maximum"]);
    }
    return contents;
};
const deserializeAws_queryResourceQuotas = (output, context) => {
    const contents = {
        ApplicationQuota: undefined,
        ApplicationVersionQuota: undefined,
        EnvironmentQuota: undefined,
        ConfigurationTemplateQuota: undefined,
        CustomPlatformQuota: undefined,
    };
    if (output["ApplicationQuota"] !== undefined) {
        contents.ApplicationQuota = deserializeAws_queryResourceQuota(output["ApplicationQuota"], context);
    }
    if (output["ApplicationVersionQuota"] !== undefined) {
        contents.ApplicationVersionQuota = deserializeAws_queryResourceQuota(output["ApplicationVersionQuota"], context);
    }
    if (output["EnvironmentQuota"] !== undefined) {
        contents.EnvironmentQuota = deserializeAws_queryResourceQuota(output["EnvironmentQuota"], context);
    }
    if (output["ConfigurationTemplateQuota"] !== undefined) {
        contents.ConfigurationTemplateQuota = deserializeAws_queryResourceQuota(output["ConfigurationTemplateQuota"], context);
    }
    if (output["CustomPlatformQuota"] !== undefined) {
        contents.CustomPlatformQuota = deserializeAws_queryResourceQuota(output["CustomPlatformQuota"], context);
    }
    return contents;
};
const deserializeAws_queryResourceTagsDescriptionMessage = (output, context) => {
    const contents = {
        ResourceArn: undefined,
        ResourceTags: undefined,
    };
    if (output["ResourceArn"] !== undefined) {
        contents.ResourceArn = (0, smithy_client_1.expectString)(output["ResourceArn"]);
    }
    if (output.ResourceTags === "") {
        contents.ResourceTags = [];
    }
    else if (output["ResourceTags"] !== undefined && output["ResourceTags"]["member"] !== undefined) {
        contents.ResourceTags = deserializeAws_queryTagList((0, smithy_client_1.getArrayIfSingleItem)(output["ResourceTags"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryResourceTypeNotSupportedException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryRetrieveEnvironmentInfoResultMessage = (output, context) => {
    const contents = {
        EnvironmentInfo: undefined,
    };
    if (output.EnvironmentInfo === "") {
        contents.EnvironmentInfo = [];
    }
    else if (output["EnvironmentInfo"] !== undefined && output["EnvironmentInfo"]["member"] !== undefined) {
        contents.EnvironmentInfo = deserializeAws_queryEnvironmentInfoDescriptionList((0, smithy_client_1.getArrayIfSingleItem)(output["EnvironmentInfo"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryS3Location = (output, context) => {
    const contents = {
        S3Bucket: undefined,
        S3Key: undefined,
    };
    if (output["S3Bucket"] !== undefined) {
        contents.S3Bucket = (0, smithy_client_1.expectString)(output["S3Bucket"]);
    }
    if (output["S3Key"] !== undefined) {
        contents.S3Key = (0, smithy_client_1.expectString)(output["S3Key"]);
    }
    return contents;
};
const deserializeAws_queryS3LocationNotInServiceRegionException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryS3SubscriptionRequiredException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_querySingleInstanceHealth = (output, context) => {
    const contents = {
        InstanceId: undefined,
        HealthStatus: undefined,
        Color: undefined,
        Causes: undefined,
        LaunchedAt: undefined,
        ApplicationMetrics: undefined,
        System: undefined,
        Deployment: undefined,
        AvailabilityZone: undefined,
        InstanceType: undefined,
    };
    if (output["InstanceId"] !== undefined) {
        contents.InstanceId = (0, smithy_client_1.expectString)(output["InstanceId"]);
    }
    if (output["HealthStatus"] !== undefined) {
        contents.HealthStatus = (0, smithy_client_1.expectString)(output["HealthStatus"]);
    }
    if (output["Color"] !== undefined) {
        contents.Color = (0, smithy_client_1.expectString)(output["Color"]);
    }
    if (output.Causes === "") {
        contents.Causes = [];
    }
    else if (output["Causes"] !== undefined && output["Causes"]["member"] !== undefined) {
        contents.Causes = deserializeAws_queryCauses((0, smithy_client_1.getArrayIfSingleItem)(output["Causes"]["member"]), context);
    }
    if (output["LaunchedAt"] !== undefined) {
        contents.LaunchedAt = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LaunchedAt"]));
    }
    if (output["ApplicationMetrics"] !== undefined) {
        contents.ApplicationMetrics = deserializeAws_queryApplicationMetrics(output["ApplicationMetrics"], context);
    }
    if (output["System"] !== undefined) {
        contents.System = deserializeAws_querySystemStatus(output["System"], context);
    }
    if (output["Deployment"] !== undefined) {
        contents.Deployment = deserializeAws_queryDeployment(output["Deployment"], context);
    }
    if (output["AvailabilityZone"] !== undefined) {
        contents.AvailabilityZone = (0, smithy_client_1.expectString)(output["AvailabilityZone"]);
    }
    if (output["InstanceType"] !== undefined) {
        contents.InstanceType = (0, smithy_client_1.expectString)(output["InstanceType"]);
    }
    return contents;
};
const deserializeAws_querySolutionStackDescription = (output, context) => {
    const contents = {
        SolutionStackName: undefined,
        PermittedFileTypes: undefined,
    };
    if (output["SolutionStackName"] !== undefined) {
        contents.SolutionStackName = (0, smithy_client_1.expectString)(output["SolutionStackName"]);
    }
    if (output.PermittedFileTypes === "") {
        contents.PermittedFileTypes = [];
    }
    else if (output["PermittedFileTypes"] !== undefined && output["PermittedFileTypes"]["member"] !== undefined) {
        contents.PermittedFileTypes = deserializeAws_querySolutionStackFileTypeList((0, smithy_client_1.getArrayIfSingleItem)(output["PermittedFileTypes"]["member"]), context);
    }
    return contents;
};
const deserializeAws_querySolutionStackFileTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_querySourceBuildInformation = (output, context) => {
    const contents = {
        SourceType: undefined,
        SourceRepository: undefined,
        SourceLocation: undefined,
    };
    if (output["SourceType"] !== undefined) {
        contents.SourceType = (0, smithy_client_1.expectString)(output["SourceType"]);
    }
    if (output["SourceRepository"] !== undefined) {
        contents.SourceRepository = (0, smithy_client_1.expectString)(output["SourceRepository"]);
    }
    if (output["SourceLocation"] !== undefined) {
        contents.SourceLocation = (0, smithy_client_1.expectString)(output["SourceLocation"]);
    }
    return contents;
};
const deserializeAws_querySourceBundleDeletionException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryStatusCodes = (output, context) => {
    const contents = {
        Status2xx: undefined,
        Status3xx: undefined,
        Status4xx: undefined,
        Status5xx: undefined,
    };
    if (output["Status2xx"] !== undefined) {
        contents.Status2xx = (0, smithy_client_1.strictParseInt32)(output["Status2xx"]);
    }
    if (output["Status3xx"] !== undefined) {
        contents.Status3xx = (0, smithy_client_1.strictParseInt32)(output["Status3xx"]);
    }
    if (output["Status4xx"] !== undefined) {
        contents.Status4xx = (0, smithy_client_1.strictParseInt32)(output["Status4xx"]);
    }
    if (output["Status5xx"] !== undefined) {
        contents.Status5xx = (0, smithy_client_1.strictParseInt32)(output["Status5xx"]);
    }
    return contents;
};
const deserializeAws_querySupportedAddonList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_querySupportedTierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeAws_querySystemStatus = (output, context) => {
    const contents = {
        CPUUtilization: undefined,
        LoadAverage: undefined,
    };
    if (output["CPUUtilization"] !== undefined) {
        contents.CPUUtilization = deserializeAws_queryCPUUtilization(output["CPUUtilization"], context);
    }
    if (output.LoadAverage === "") {
        contents.LoadAverage = [];
    }
    else if (output["LoadAverage"] !== undefined && output["LoadAverage"]["member"] !== undefined) {
        contents.LoadAverage = deserializeAws_queryLoadAverage((0, smithy_client_1.getArrayIfSingleItem)(output["LoadAverage"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryTag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTag(entry, context);
    });
};
const deserializeAws_queryTooManyApplicationsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTooManyApplicationVersionsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTooManyBucketsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTooManyConfigurationTemplatesException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTooManyEnvironmentsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTooManyPlatformsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTooManyTagsException = (output, context) => {
    const contents = {
        message: undefined,
    };
    if (output["message"] !== undefined) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
    }
    return contents;
};
const deserializeAws_queryTrigger = (output, context) => {
    const contents = {
        Name: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
    }
    return contents;
};
const deserializeAws_queryTriggerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTrigger(entry, context);
    });
};
const deserializeAws_queryValidationMessage = (output, context) => {
    const contents = {
        Message: undefined,
        Severity: undefined,
        Namespace: undefined,
        OptionName: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
    }
    if (output["Severity"] !== undefined) {
        contents.Severity = (0, smithy_client_1.expectString)(output["Severity"]);
    }
    if (output["Namespace"] !== undefined) {
        contents.Namespace = (0, smithy_client_1.expectString)(output["Namespace"]);
    }
    if (output["OptionName"] !== undefined) {
        contents.OptionName = (0, smithy_client_1.expectString)(output["OptionName"]);
    }
    return contents;
};
const deserializeAws_queryValidationMessagesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryValidationMessage(entry, context);
    });
};
const deserializeAws_queryVersionLabelsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
