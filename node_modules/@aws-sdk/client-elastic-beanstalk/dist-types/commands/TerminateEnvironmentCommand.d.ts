import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ElasticBeanstalkClient";
import { EnvironmentDescription, TerminateEnvironmentMessage } from "../models/models_0";
/**
 * @public
 *
 * The input for {@link TerminateEnvironmentCommand}.
 */
export interface TerminateEnvironmentCommandInput extends TerminateEnvironmentMessage {
}
/**
 * @public
 *
 * The output of {@link TerminateEnvironmentCommand}.
 */
export interface TerminateEnvironmentCommandOutput extends EnvironmentDescription, __MetadataBearer {
}
/**
 * @public
 * <p>Terminates the specified environment.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ElasticBeanstalkClient, TerminateEnvironmentCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
 * // const { ElasticBeanstalkClient, TerminateEnvironmentCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
 * const client = new ElasticBeanstalkClient(config);
 * const input = { // TerminateEnvironmentMessage
 *   EnvironmentId: "STRING_VALUE",
 *   EnvironmentName: "STRING_VALUE",
 *   TerminateResources: true || false,
 *   ForceTerminate: true || false,
 * };
 * const command = new TerminateEnvironmentCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @param TerminateEnvironmentCommandInput - {@link TerminateEnvironmentCommandInput}
 * @returns {@link TerminateEnvironmentCommandOutput}
 * @see {@link TerminateEnvironmentCommandInput} for command's `input` shape.
 * @see {@link TerminateEnvironmentCommandOutput} for command's `response` shape.
 * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
 *
 * @throws {@link InsufficientPrivilegesException} (client fault)
 *  <p>The specified account does not have sufficient privileges for one or more AWS
 *       services.</p>
 *
 *
 * @example To terminate an environment
 * ```javascript
 * // The following operation terminates an Elastic Beanstalk environment named my-env:
 * const input = {
 *   "EnvironmentName": "my-env"
 * };
 * const command = new TerminateEnvironmentCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "AbortableOperationInProgress": false,
 *   "ApplicationName": "my-app",
 *   "CNAME": "my-env.elasticbeanstalk.com",
 *   "DateCreated": "2015-08-12T18:52:53.622Z",
 *   "DateUpdated": "2015-08-12T19:05:54.744Z",
 *   "EndpointURL": "awseb-e-f-AWSEBLoa-1I9XUMP4-8492WNUP202574.us-west-2.elb.amazonaws.com",
 *   "EnvironmentId": "e-fh2eravpns",
 *   "EnvironmentName": "my-env",
 *   "Health": "Grey",
 *   "SolutionStackName": "64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8",
 *   "Status": "Terminating",
 *   "Tier": {
 *     "Name": "WebServer",
 *     "Type": "Standard",
 *     "Version": " "
 *   }
 * }
 * *\/
 * // example id: to-terminate-an-environment-1456277888556
 * ```
 *
 */
export declare class TerminateEnvironmentCommand extends $Command<TerminateEnvironmentCommandInput, TerminateEnvironmentCommandOutput, ElasticBeanstalkClientResolvedConfig> {
    readonly input: TerminateEnvironmentCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: TerminateEnvironmentCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TerminateEnvironmentCommandInput, TerminateEnvironmentCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
