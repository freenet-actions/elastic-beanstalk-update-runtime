import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ElasticBeanstalkClient";
import { ConfigurationSettingsDescriptions, DescribeConfigurationSettingsMessage } from "../models/models_0";
/**
 * @public
 *
 * The input for {@link DescribeConfigurationSettingsCommand}.
 */
export interface DescribeConfigurationSettingsCommandInput extends DescribeConfigurationSettingsMessage {
}
/**
 * @public
 *
 * The output of {@link DescribeConfigurationSettingsCommand}.
 */
export interface DescribeConfigurationSettingsCommandOutput extends ConfigurationSettingsDescriptions, __MetadataBearer {
}
/**
 * @public
 * <p>Returns a description of the settings for the specified configuration set, that is,
 *       either a configuration template or the configuration set associated with a running
 *       environment.</p>
 *          <p>When describing the settings for the configuration set associated with a running
 *       environment, it is possible to receive two sets of setting descriptions. One is the deployed
 *       configuration set, and the other is a draft configuration of an environment that is either in
 *       the process of deployment or that failed to deploy.</p>
 *          <p>Related Topics</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a>DeleteEnvironmentConfiguration</a>
 *                </p>
 *             </li>
 *          </ul>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ElasticBeanstalkClient, DescribeConfigurationSettingsCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
 * // const { ElasticBeanstalkClient, DescribeConfigurationSettingsCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
 * const client = new ElasticBeanstalkClient(config);
 * const input = { // DescribeConfigurationSettingsMessage
 *   ApplicationName: "STRING_VALUE", // required
 *   TemplateName: "STRING_VALUE",
 *   EnvironmentName: "STRING_VALUE",
 * };
 * const command = new DescribeConfigurationSettingsCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @param DescribeConfigurationSettingsCommandInput - {@link DescribeConfigurationSettingsCommandInput}
 * @returns {@link DescribeConfigurationSettingsCommandOutput}
 * @see {@link DescribeConfigurationSettingsCommandInput} for command's `input` shape.
 * @see {@link DescribeConfigurationSettingsCommandOutput} for command's `response` shape.
 * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
 *
 * @throws {@link TooManyBucketsException} (client fault)
 *  <p>The specified account has reached its limit of Amazon S3 buckets.</p>
 *
 *
 * @example To view configurations settings for an environment
 * ```javascript
 * // The following operation retrieves configuration settings for an environment named my-env:
 * const input = {
 *   "ApplicationName": "my-app",
 *   "EnvironmentName": "my-env"
 * };
 * const command = new DescribeConfigurationSettingsCommand(input);
 * const response = await client.send(command);
 * /* response ==
 * {
 *   "ConfigurationSettings": [
 *     {
 *       "ApplicationName": "my-app",
 *       "DateCreated": "2015-08-13T19:16:25Z",
 *       "DateUpdated": "2015-08-13T23:30:07Z",
 *       "DeploymentStatus": "deployed",
 *       "Description": "Environment created from the EB CLI using \"eb create\"",
 *       "EnvironmentName": "my-env",
 *       "OptionSettings": [
 *         {
 *           "Namespace": "aws:autoscaling:asg",
 *           "OptionName": "Availability Zones",
 *           "ResourceName": "AWSEBAutoScalingGroup",
 *           "Value": "Any"
 *         },
 *         {
 *           "Namespace": "aws:autoscaling:asg",
 *           "OptionName": "Cooldown",
 *           "ResourceName": "AWSEBAutoScalingGroup",
 *           "Value": "360"
 *         },
 *         {
 *           "Namespace": "aws:elb:policies",
 *           "OptionName": "ConnectionDrainingTimeout",
 *           "ResourceName": "AWSEBLoadBalancer",
 *           "Value": "20"
 *         },
 *         {
 *           "Namespace": "aws:elb:policies",
 *           "OptionName": "ConnectionSettingIdleTimeout",
 *           "ResourceName": "AWSEBLoadBalancer",
 *           "Value": "60"
 *         }
 *       ],
 *       "SolutionStackName": "64bit Amazon Linux 2015.03 v2.0.0 running Tomcat 8 Java 8"
 *     }
 *   ]
 * }
 * *\/
 * // example id: to-view-configurations-settings-for-an-environment-1456276924537
 * ```
 *
 */
export declare class DescribeConfigurationSettingsCommand extends $Command<DescribeConfigurationSettingsCommandInput, DescribeConfigurationSettingsCommandOutput, ElasticBeanstalkClientResolvedConfig> {
    readonly input: DescribeConfigurationSettingsCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    /**
     * @public
     */
    constructor(input: DescribeConfigurationSettingsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticBeanstalkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationSettingsCommandInput, DescribeConfigurationSettingsCommandOutput>;
    /**
     * @internal
     */
    private serialize;
    /**
     * @internal
     */
    private deserialize;
}
